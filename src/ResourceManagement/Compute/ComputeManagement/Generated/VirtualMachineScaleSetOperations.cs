// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Compute
{
    /// <summary>
    /// Operations for managing the virtual machine scale sets in compute
    /// management.
    /// </summary>
    internal partial class VirtualMachineScaleSetOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineScaleSetOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineScaleSetOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineScaleSetOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine Scale
        /// Set operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Virtual Machine Scale Set operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(string resourceGroupName, VirtualMachineScaleSet parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.VirtualMachineProfile != null)
            {
                if (parameters.VirtualMachineProfile.ExtensionProfile != null)
                {
                    if (parameters.VirtualMachineProfile.ExtensionProfile.Extensions != null)
                    {
                        foreach (VirtualMachineScaleSetExtension extensionsParameterItem in parameters.VirtualMachineProfile.ExtensionProfile.Extensions)
                        {
                            if (extensionsParameterItem.Location == null)
                            {
                                throw new ArgumentNullException("parameters.VirtualMachineProfile.ExtensionProfile.Extensions.Location");
                            }
                        }
                    }
                }
                if (parameters.VirtualMachineProfile.NetworkProfile != null)
                {
                    if (parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations != null)
                    {
                        foreach (VirtualMachineScaleSetNetworkConfiguration networkInterfaceConfigurationsParameterItem in parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations)
                        {
                            if (networkInterfaceConfigurationsParameterItem.IPConfigurations == null)
                            {
                                throw new ArgumentNullException("parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.IPConfigurations");
                            }
                            if (networkInterfaceConfigurationsParameterItem.IPConfigurations != null)
                            {
                                foreach (VirtualMachineScaleSetIPConfiguration iPConfigurationsParameterItem in networkInterfaceConfigurationsParameterItem.IPConfigurations)
                                {
                                    if (iPConfigurationsParameterItem.Name == null)
                                    {
                                        throw new ArgumentNullException("parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.IPConfigurations.Name");
                                    }
                                    if (iPConfigurationsParameterItem.Subnet == null)
                                    {
                                        throw new ArgumentNullException("parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.IPConfigurations.Subnet");
                                    }
                                }
                            }
                            if (networkInterfaceConfigurationsParameterItem.Name == null)
                            {
                                throw new ArgumentNullException("parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.Name");
                            }
                        }
                    }
                }
                if (parameters.VirtualMachineProfile.StorageProfile != null)
                {
                    if (parameters.VirtualMachineProfile.StorageProfile.OSDisk != null)
                    {
                        if (parameters.VirtualMachineProfile.StorageProfile.OSDisk.CreateOption == null)
                        {
                            throw new ArgumentNullException("parameters.VirtualMachineProfile.StorageProfile.OSDisk.CreateOption");
                        }
                        if (parameters.VirtualMachineProfile.StorageProfile.OSDisk.Name == null)
                        {
                            throw new ArgumentNullException("parameters.VirtualMachineProfile.StorageProfile.OSDisk.Name");
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            if (parameters.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineScaleSetJsonValue = new JObject();
                requestDoc = virtualMachineScaleSetJsonValue;
                
                if (parameters.Sku != null)
                {
                    JObject skuValue = new JObject();
                    virtualMachineScaleSetJsonValue["sku"] = skuValue;
                    
                    if (parameters.Sku.Name != null)
                    {
                        skuValue["name"] = parameters.Sku.Name;
                    }
                    
                    if (parameters.Sku.Tier != null)
                    {
                        skuValue["tier"] = parameters.Sku.Tier;
                    }
                    
                    if (parameters.Sku.Capacity != null)
                    {
                        skuValue["capacity"] = parameters.Sku.Capacity.Value;
                    }
                }
                
                JObject propertiesValue = new JObject();
                virtualMachineScaleSetJsonValue["properties"] = propertiesValue;
                
                if (parameters.UpgradePolicy != null)
                {
                    JObject upgradePolicyValue = new JObject();
                    propertiesValue["upgradePolicy"] = upgradePolicyValue;
                    
                    if (parameters.UpgradePolicy.Mode != null)
                    {
                        upgradePolicyValue["mode"] = parameters.UpgradePolicy.Mode;
                    }
                }
                
                if (parameters.VirtualMachineProfile != null)
                {
                    JObject virtualMachineProfileValue = new JObject();
                    propertiesValue["virtualMachineProfile"] = virtualMachineProfileValue;
                    
                    if (parameters.VirtualMachineProfile.OSProfile != null)
                    {
                        JObject osProfileValue = new JObject();
                        virtualMachineProfileValue["osProfile"] = osProfileValue;
                        
                        if (parameters.VirtualMachineProfile.OSProfile.ComputerNamePrefix != null)
                        {
                            osProfileValue["computerNamePrefix"] = parameters.VirtualMachineProfile.OSProfile.ComputerNamePrefix;
                        }
                        
                        if (parameters.VirtualMachineProfile.OSProfile.AdminUsername != null)
                        {
                            osProfileValue["adminUsername"] = parameters.VirtualMachineProfile.OSProfile.AdminUsername;
                        }
                        
                        if (parameters.VirtualMachineProfile.OSProfile.AdminPassword != null)
                        {
                            osProfileValue["adminPassword"] = parameters.VirtualMachineProfile.OSProfile.AdminPassword;
                        }
                        
                        if (parameters.VirtualMachineProfile.OSProfile.CustomData != null)
                        {
                            osProfileValue["customData"] = parameters.VirtualMachineProfile.OSProfile.CustomData;
                        }
                        
                        if (parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration != null)
                        {
                            JObject windowsConfigurationValue = new JObject();
                            osProfileValue["windowsConfiguration"] = windowsConfigurationValue;
                            
                            if (parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.ProvisionVMAgent != null)
                            {
                                windowsConfigurationValue["provisionVMAgent"] = parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.ProvisionVMAgent.Value;
                            }
                            
                            if (parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.EnableAutomaticUpdates != null)
                            {
                                windowsConfigurationValue["enableAutomaticUpdates"] = parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.EnableAutomaticUpdates.Value;
                            }
                            
                            if (parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.TimeZone != null)
                            {
                                windowsConfigurationValue["timeZone"] = parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.TimeZone;
                            }
                            
                            if (parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.AdditionalUnattendContents != null)
                            {
                                if (parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.AdditionalUnattendContents is ILazyCollection == false || ((ILazyCollection)parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.AdditionalUnattendContents).IsInitialized)
                                {
                                    JArray additionalUnattendContentArray = new JArray();
                                    foreach (AdditionalUnattendContent additionalUnattendContentItem in parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.AdditionalUnattendContents)
                                    {
                                        JObject additionalUnattendContentValue = new JObject();
                                        additionalUnattendContentArray.Add(additionalUnattendContentValue);
                                        
                                        if (additionalUnattendContentItem.PassName != null)
                                        {
                                            additionalUnattendContentValue["passName"] = additionalUnattendContentItem.PassName;
                                        }
                                        
                                        if (additionalUnattendContentItem.ComponentName != null)
                                        {
                                            additionalUnattendContentValue["componentName"] = additionalUnattendContentItem.ComponentName;
                                        }
                                        
                                        if (additionalUnattendContentItem.SettingName != null)
                                        {
                                            additionalUnattendContentValue["settingName"] = additionalUnattendContentItem.SettingName;
                                        }
                                        
                                        if (additionalUnattendContentItem.Content != null)
                                        {
                                            additionalUnattendContentValue["content"] = additionalUnattendContentItem.Content;
                                        }
                                    }
                                    windowsConfigurationValue["additionalUnattendContent"] = additionalUnattendContentArray;
                                }
                            }
                            
                            if (parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.WinRMConfiguration != null)
                            {
                                JObject winRMValue = new JObject();
                                windowsConfigurationValue["winRM"] = winRMValue;
                                
                                if (parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners != null)
                                {
                                    if (parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners is ILazyCollection == false || ((ILazyCollection)parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners).IsInitialized)
                                    {
                                        JArray listenersArray = new JArray();
                                        foreach (WinRMListener listenersItem in parameters.VirtualMachineProfile.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners)
                                        {
                                            JObject winRMListenerValue = new JObject();
                                            listenersArray.Add(winRMListenerValue);
                                            
                                            if (listenersItem.Protocol != null)
                                            {
                                                winRMListenerValue["protocol"] = listenersItem.Protocol;
                                            }
                                            
                                            if (listenersItem.CertificateUrl != null)
                                            {
                                                winRMListenerValue["certificateUrl"] = listenersItem.CertificateUrl.AbsoluteUri;
                                            }
                                        }
                                        winRMValue["listeners"] = listenersArray;
                                    }
                                }
                            }
                        }
                        
                        if (parameters.VirtualMachineProfile.OSProfile.LinuxConfiguration != null)
                        {
                            JObject linuxConfigurationValue = new JObject();
                            osProfileValue["linuxConfiguration"] = linuxConfigurationValue;
                            
                            if (parameters.VirtualMachineProfile.OSProfile.LinuxConfiguration.DisablePasswordAuthentication != null)
                            {
                                linuxConfigurationValue["disablePasswordAuthentication"] = parameters.VirtualMachineProfile.OSProfile.LinuxConfiguration.DisablePasswordAuthentication.Value;
                            }
                            
                            if (parameters.VirtualMachineProfile.OSProfile.LinuxConfiguration.SshConfiguration != null)
                            {
                                JObject sshValue = new JObject();
                                linuxConfigurationValue["ssh"] = sshValue;
                                
                                if (parameters.VirtualMachineProfile.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys != null)
                                {
                                    if (parameters.VirtualMachineProfile.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys is ILazyCollection == false || ((ILazyCollection)parameters.VirtualMachineProfile.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys).IsInitialized)
                                    {
                                        JArray publicKeysArray = new JArray();
                                        foreach (SshPublicKey publicKeysItem in parameters.VirtualMachineProfile.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys)
                                        {
                                            JObject sshPublicKeyValue = new JObject();
                                            publicKeysArray.Add(sshPublicKeyValue);
                                            
                                            if (publicKeysItem.Path != null)
                                            {
                                                sshPublicKeyValue["path"] = publicKeysItem.Path;
                                            }
                                            
                                            if (publicKeysItem.KeyData != null)
                                            {
                                                sshPublicKeyValue["keyData"] = publicKeysItem.KeyData;
                                            }
                                        }
                                        sshValue["publicKeys"] = publicKeysArray;
                                    }
                                }
                            }
                        }
                        
                        if (parameters.VirtualMachineProfile.OSProfile.Secrets != null)
                        {
                            JArray secretsArray = new JArray();
                            foreach (VaultSecretGroup secretsItem in parameters.VirtualMachineProfile.OSProfile.Secrets)
                            {
                                JObject vaultSecretGroupValue = new JObject();
                                secretsArray.Add(vaultSecretGroupValue);
                                
                                if (secretsItem.SourceVault != null)
                                {
                                    JObject sourceVaultValue = new JObject();
                                    vaultSecretGroupValue["sourceVault"] = sourceVaultValue;
                                    
                                    if (secretsItem.SourceVault.ReferenceUri != null)
                                    {
                                        sourceVaultValue["id"] = secretsItem.SourceVault.ReferenceUri;
                                    }
                                }
                                
                                if (secretsItem.VaultCertificates != null)
                                {
                                    if (secretsItem.VaultCertificates is ILazyCollection == false || ((ILazyCollection)secretsItem.VaultCertificates).IsInitialized)
                                    {
                                        JArray vaultCertificatesArray = new JArray();
                                        foreach (VaultCertificate vaultCertificatesItem in secretsItem.VaultCertificates)
                                        {
                                            JObject vaultCertificateValue = new JObject();
                                            vaultCertificatesArray.Add(vaultCertificateValue);
                                            
                                            if (vaultCertificatesItem.CertificateUrl != null)
                                            {
                                                vaultCertificateValue["certificateUrl"] = vaultCertificatesItem.CertificateUrl;
                                            }
                                            
                                            if (vaultCertificatesItem.CertificateStore != null)
                                            {
                                                vaultCertificateValue["certificateStore"] = vaultCertificatesItem.CertificateStore;
                                            }
                                        }
                                        vaultSecretGroupValue["vaultCertificates"] = vaultCertificatesArray;
                                    }
                                }
                            }
                            osProfileValue["secrets"] = secretsArray;
                        }
                    }
                    
                    if (parameters.VirtualMachineProfile.StorageProfile != null)
                    {
                        JObject storageProfileValue = new JObject();
                        virtualMachineProfileValue["storageProfile"] = storageProfileValue;
                        
                        if (parameters.VirtualMachineProfile.StorageProfile.ImageReference != null)
                        {
                            JObject imageReferenceValue = new JObject();
                            storageProfileValue["imageReference"] = imageReferenceValue;
                            
                            if (parameters.VirtualMachineProfile.StorageProfile.ImageReference.Publisher != null)
                            {
                                imageReferenceValue["publisher"] = parameters.VirtualMachineProfile.StorageProfile.ImageReference.Publisher;
                            }
                            
                            if (parameters.VirtualMachineProfile.StorageProfile.ImageReference.Offer != null)
                            {
                                imageReferenceValue["offer"] = parameters.VirtualMachineProfile.StorageProfile.ImageReference.Offer;
                            }
                            
                            if (parameters.VirtualMachineProfile.StorageProfile.ImageReference.Sku != null)
                            {
                                imageReferenceValue["sku"] = parameters.VirtualMachineProfile.StorageProfile.ImageReference.Sku;
                            }
                            
                            if (parameters.VirtualMachineProfile.StorageProfile.ImageReference.Version != null)
                            {
                                imageReferenceValue["version"] = parameters.VirtualMachineProfile.StorageProfile.ImageReference.Version;
                            }
                        }
                        
                        if (parameters.VirtualMachineProfile.StorageProfile.OSDisk != null)
                        {
                            JObject osDiskValue = new JObject();
                            storageProfileValue["osDisk"] = osDiskValue;
                            
                            osDiskValue["name"] = parameters.VirtualMachineProfile.StorageProfile.OSDisk.Name;
                            
                            if (parameters.VirtualMachineProfile.StorageProfile.OSDisk.Caching != null)
                            {
                                osDiskValue["caching"] = parameters.VirtualMachineProfile.StorageProfile.OSDisk.Caching;
                            }
                            
                            osDiskValue["createOption"] = parameters.VirtualMachineProfile.StorageProfile.OSDisk.CreateOption;
                            
                            if (parameters.VirtualMachineProfile.StorageProfile.OSDisk.OperatingSystemType != null)
                            {
                                osDiskValue["osType"] = parameters.VirtualMachineProfile.StorageProfile.OSDisk.OperatingSystemType;
                            }
                            
                            if (parameters.VirtualMachineProfile.StorageProfile.OSDisk.SourceImage != null)
                            {
                                JObject imageValue = new JObject();
                                osDiskValue["image"] = imageValue;
                                
                                if (parameters.VirtualMachineProfile.StorageProfile.OSDisk.SourceImage.Uri != null)
                                {
                                    imageValue["uri"] = parameters.VirtualMachineProfile.StorageProfile.OSDisk.SourceImage.Uri;
                                }
                            }
                            
                            if (parameters.VirtualMachineProfile.StorageProfile.OSDisk.VirtualHardDiskContainers != null)
                            {
                                if (parameters.VirtualMachineProfile.StorageProfile.OSDisk.VirtualHardDiskContainers is ILazyCollection == false || ((ILazyCollection)parameters.VirtualMachineProfile.StorageProfile.OSDisk.VirtualHardDiskContainers).IsInitialized)
                                {
                                    JArray vhdContainersArray = new JArray();
                                    foreach (string vhdContainersItem in parameters.VirtualMachineProfile.StorageProfile.OSDisk.VirtualHardDiskContainers)
                                    {
                                        vhdContainersArray.Add(vhdContainersItem);
                                    }
                                    osDiskValue["vhdContainers"] = vhdContainersArray;
                                }
                            }
                        }
                    }
                    
                    if (parameters.VirtualMachineProfile.NetworkProfile != null)
                    {
                        JObject networkProfileValue = new JObject();
                        virtualMachineProfileValue["networkProfile"] = networkProfileValue;
                        
                        if (parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations != null)
                        {
                            if (parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations).IsInitialized)
                            {
                                JArray networkInterfaceConfigurationsArray = new JArray();
                                foreach (VirtualMachineScaleSetNetworkConfiguration networkInterfaceConfigurationsItem in parameters.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations)
                                {
                                    JObject virtualMachineScaleSetNetworkConfigurationJsonValue = new JObject();
                                    networkInterfaceConfigurationsArray.Add(virtualMachineScaleSetNetworkConfigurationJsonValue);
                                    
                                    virtualMachineScaleSetNetworkConfigurationJsonValue["name"] = networkInterfaceConfigurationsItem.Name;
                                    
                                    JObject propertiesValue2 = new JObject();
                                    virtualMachineScaleSetNetworkConfigurationJsonValue["properties"] = propertiesValue2;
                                    
                                    if (networkInterfaceConfigurationsItem.Primary != null)
                                    {
                                        propertiesValue2["primary"] = networkInterfaceConfigurationsItem.Primary.Value;
                                    }
                                    
                                    if (networkInterfaceConfigurationsItem.IPConfigurations != null)
                                    {
                                        if (networkInterfaceConfigurationsItem.IPConfigurations is ILazyCollection == false || ((ILazyCollection)networkInterfaceConfigurationsItem.IPConfigurations).IsInitialized)
                                        {
                                            JArray ipConfigurationsArray = new JArray();
                                            foreach (VirtualMachineScaleSetIPConfiguration ipConfigurationsItem in networkInterfaceConfigurationsItem.IPConfigurations)
                                            {
                                                JObject virtualMachineScaleSetIPConfigurationJsonValue = new JObject();
                                                ipConfigurationsArray.Add(virtualMachineScaleSetIPConfigurationJsonValue);
                                                
                                                virtualMachineScaleSetIPConfigurationJsonValue["name"] = ipConfigurationsItem.Name;
                                                
                                                JObject propertiesValue3 = new JObject();
                                                virtualMachineScaleSetIPConfigurationJsonValue["properties"] = propertiesValue3;
                                                
                                                JObject subnetValue = new JObject();
                                                propertiesValue3["subnet"] = subnetValue;
                                                
                                                if (ipConfigurationsItem.Subnet.ReferenceUri != null)
                                                {
                                                    subnetValue["id"] = ipConfigurationsItem.Subnet.ReferenceUri;
                                                }
                                                
                                                if (ipConfigurationsItem.LoadBalancerBackendAddressPools != null)
                                                {
                                                    if (ipConfigurationsItem.LoadBalancerBackendAddressPools is ILazyCollection == false || ((ILazyCollection)ipConfigurationsItem.LoadBalancerBackendAddressPools).IsInitialized)
                                                    {
                                                        JArray loadBalancerBackendAddressPoolsArray = new JArray();
                                                        foreach (IPConfigurationLoadBalancerAddressPool loadBalancerBackendAddressPoolsItem in ipConfigurationsItem.LoadBalancerBackendAddressPools)
                                                        {
                                                            JObject iPConfigurationLoadBalancerAddressPoolJsonValue = new JObject();
                                                            loadBalancerBackendAddressPoolsArray.Add(iPConfigurationLoadBalancerAddressPoolJsonValue);
                                                            
                                                            if (loadBalancerBackendAddressPoolsItem.ReferenceUri != null)
                                                            {
                                                                iPConfigurationLoadBalancerAddressPoolJsonValue["id"] = loadBalancerBackendAddressPoolsItem.ReferenceUri;
                                                            }
                                                        }
                                                        propertiesValue3["loadBalancerBackendAddressPools"] = loadBalancerBackendAddressPoolsArray;
                                                    }
                                                }
                                                
                                                if (ipConfigurationsItem.LoadBalancerInboundNatPools != null)
                                                {
                                                    if (ipConfigurationsItem.LoadBalancerInboundNatPools is ILazyCollection == false || ((ILazyCollection)ipConfigurationsItem.LoadBalancerInboundNatPools).IsInitialized)
                                                    {
                                                        JArray loadBalancerBackendAddressPoolsArray2 = new JArray();
                                                        foreach (IPConfigurationLoadBalancerInboundNATPool loadBalancerBackendAddressPoolsItem2 in ipConfigurationsItem.LoadBalancerInboundNatPools)
                                                        {
                                                            JObject iPConfigurationLoadBalancerInboundNATPoolJsonValue = new JObject();
                                                            loadBalancerBackendAddressPoolsArray2.Add(iPConfigurationLoadBalancerInboundNATPoolJsonValue);
                                                            
                                                            if (loadBalancerBackendAddressPoolsItem2.ReferenceUri != null)
                                                            {
                                                                iPConfigurationLoadBalancerInboundNATPoolJsonValue["id"] = loadBalancerBackendAddressPoolsItem2.ReferenceUri;
                                                            }
                                                        }
                                                        propertiesValue3["loadBalancerBackendAddressPools"] = loadBalancerBackendAddressPoolsArray2;
                                                    }
                                                }
                                            }
                                            propertiesValue2["ipConfigurations"] = ipConfigurationsArray;
                                        }
                                    }
                                }
                                networkProfileValue["networkInterfaceConfigurations"] = networkInterfaceConfigurationsArray;
                            }
                        }
                    }
                    
                    if (parameters.VirtualMachineProfile.ExtensionProfile != null)
                    {
                        JObject extensionProfileValue = new JObject();
                        virtualMachineProfileValue["extensionProfile"] = extensionProfileValue;
                        
                        if (parameters.VirtualMachineProfile.ExtensionProfile.Extensions != null)
                        {
                            JArray extensionsArray = new JArray();
                            foreach (VirtualMachineScaleSetExtension extensionsItem in parameters.VirtualMachineProfile.ExtensionProfile.Extensions)
                            {
                                JObject virtualMachineScaleSetExtensionJsonValue = new JObject();
                                extensionsArray.Add(virtualMachineScaleSetExtensionJsonValue);
                                
                                JObject propertiesValue4 = new JObject();
                                virtualMachineScaleSetExtensionJsonValue["properties"] = propertiesValue4;
                                
                                if (extensionsItem.Publisher != null)
                                {
                                    propertiesValue4["publisher"] = extensionsItem.Publisher;
                                }
                                
                                if (extensionsItem.ExtensionType != null)
                                {
                                    propertiesValue4["type"] = extensionsItem.ExtensionType;
                                }
                                
                                if (extensionsItem.TypeHandlerVersion != null)
                                {
                                    propertiesValue4["typeHandlerVersion"] = extensionsItem.TypeHandlerVersion;
                                }
                                
                                propertiesValue4["autoUpgradeMinorVersion"] = extensionsItem.AutoUpgradeMinorVersion;
                                
                                if (extensionsItem.Settings != null)
                                {
                                    propertiesValue4["settings"] = JObject.Parse(extensionsItem.Settings);
                                }
                                
                                if (extensionsItem.ProtectedSettings != null)
                                {
                                    propertiesValue4["protectedSettings"] = JObject.Parse(extensionsItem.ProtectedSettings);
                                }
                                
                                if (extensionsItem.ProvisioningState != null)
                                {
                                    propertiesValue4["provisioningState"] = extensionsItem.ProvisioningState;
                                }
                                
                                if (extensionsItem.Id != null)
                                {
                                    virtualMachineScaleSetExtensionJsonValue["id"] = extensionsItem.Id;
                                }
                                
                                if (extensionsItem.Name != null)
                                {
                                    virtualMachineScaleSetExtensionJsonValue["name"] = extensionsItem.Name;
                                }
                                
                                if (extensionsItem.Type != null)
                                {
                                    virtualMachineScaleSetExtensionJsonValue["type"] = extensionsItem.Type;
                                }
                                
                                virtualMachineScaleSetExtensionJsonValue["location"] = extensionsItem.Location;
                                
                                if (extensionsItem.Tags != null)
                                {
                                    JObject tagsDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair in extensionsItem.Tags)
                                    {
                                        string tagsKey = pair.Key;
                                        string tagsValue = pair.Value;
                                        tagsDictionary[tagsKey] = tagsValue;
                                    }
                                    virtualMachineScaleSetExtensionJsonValue["tags"] = tagsDictionary;
                                }
                            }
                            extensionProfileValue["extensions"] = extensionsArray;
                        }
                    }
                }
                
                if (parameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = parameters.ProvisioningState;
                }
                
                if (parameters.Id != null)
                {
                    virtualMachineScaleSetJsonValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    virtualMachineScaleSetJsonValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    virtualMachineScaleSetJsonValue["type"] = parameters.Type;
                }
                
                virtualMachineScaleSetJsonValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary2 = new JObject();
                    foreach (KeyValuePair<string, string> pair2 in parameters.Tags)
                    {
                        string tagsKey2 = pair2.Key;
                        string tagsValue2 = pair2.Value;
                        tagsDictionary2[tagsKey2] = tagsValue2;
                    }
                    virtualMachineScaleSetJsonValue["tags"] = tagsDictionary2;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineScaleSet virtualMachineScaleSetInstance = new VirtualMachineScaleSet();
                            result.VirtualMachineScaleSet = virtualMachineScaleSetInstance;
                            
                            JToken skuValue2 = responseDoc["sku"];
                            if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                            {
                                Sku skuInstance = new Sku();
                                virtualMachineScaleSetInstance.Sku = skuInstance;
                                
                                JToken nameValue = skuValue2["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    skuInstance.Name = nameInstance;
                                }
                                
                                JToken tierValue = skuValue2["tier"];
                                if (tierValue != null && tierValue.Type != JTokenType.Null)
                                {
                                    string tierInstance = ((string)tierValue);
                                    skuInstance.Tier = tierInstance;
                                }
                                
                                JToken capacityValue = skuValue2["capacity"];
                                if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                {
                                    uint capacityInstance = ((uint)capacityValue);
                                    skuInstance.Capacity = capacityInstance;
                                }
                            }
                            
                            JToken propertiesValue5 = responseDoc["properties"];
                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                            {
                                JToken upgradePolicyValue2 = propertiesValue5["upgradePolicy"];
                                if (upgradePolicyValue2 != null && upgradePolicyValue2.Type != JTokenType.Null)
                                {
                                    UpgradePolicy upgradePolicyInstance = new UpgradePolicy();
                                    virtualMachineScaleSetInstance.UpgradePolicy = upgradePolicyInstance;
                                    
                                    JToken modeValue = upgradePolicyValue2["mode"];
                                    if (modeValue != null && modeValue.Type != JTokenType.Null)
                                    {
                                        string modeInstance = ((string)modeValue);
                                        upgradePolicyInstance.Mode = modeInstance;
                                    }
                                }
                                
                                JToken virtualMachineProfileValue2 = propertiesValue5["virtualMachineProfile"];
                                if (virtualMachineProfileValue2 != null && virtualMachineProfileValue2.Type != JTokenType.Null)
                                {
                                    VirtualMachineScaleSetVMProfile virtualMachineProfileInstance = new VirtualMachineScaleSetVMProfile();
                                    virtualMachineScaleSetInstance.VirtualMachineProfile = virtualMachineProfileInstance;
                                    
                                    JToken osProfileValue2 = virtualMachineProfileValue2["osProfile"];
                                    if (osProfileValue2 != null && osProfileValue2.Type != JTokenType.Null)
                                    {
                                        VirtualMachineScaleSetOSProfile osProfileInstance = new VirtualMachineScaleSetOSProfile();
                                        virtualMachineProfileInstance.OSProfile = osProfileInstance;
                                        
                                        JToken computerNamePrefixValue = osProfileValue2["computerNamePrefix"];
                                        if (computerNamePrefixValue != null && computerNamePrefixValue.Type != JTokenType.Null)
                                        {
                                            string computerNamePrefixInstance = ((string)computerNamePrefixValue);
                                            osProfileInstance.ComputerNamePrefix = computerNamePrefixInstance;
                                        }
                                        
                                        JToken adminUsernameValue = osProfileValue2["adminUsername"];
                                        if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                        {
                                            string adminUsernameInstance = ((string)adminUsernameValue);
                                            osProfileInstance.AdminUsername = adminUsernameInstance;
                                        }
                                        
                                        JToken adminPasswordValue = osProfileValue2["adminPassword"];
                                        if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                        {
                                            string adminPasswordInstance = ((string)adminPasswordValue);
                                            osProfileInstance.AdminPassword = adminPasswordInstance;
                                        }
                                        
                                        JToken customDataValue = osProfileValue2["customData"];
                                        if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                        {
                                            string customDataInstance = ((string)customDataValue);
                                            osProfileInstance.CustomData = customDataInstance;
                                        }
                                        
                                        JToken windowsConfigurationValue2 = osProfileValue2["windowsConfiguration"];
                                        if (windowsConfigurationValue2 != null && windowsConfigurationValue2.Type != JTokenType.Null)
                                        {
                                            WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                            osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                            
                                            JToken provisionVMAgentValue = windowsConfigurationValue2["provisionVMAgent"];
                                            if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                            {
                                                bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                            }
                                            
                                            JToken enableAutomaticUpdatesValue = windowsConfigurationValue2["enableAutomaticUpdates"];
                                            if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                            {
                                                bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                            }
                                            
                                            JToken timeZoneValue = windowsConfigurationValue2["timeZone"];
                                            if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                            {
                                                string timeZoneInstance = ((string)timeZoneValue);
                                                windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                            }
                                            
                                            JToken additionalUnattendContentArray2 = windowsConfigurationValue2["additionalUnattendContent"];
                                            if (additionalUnattendContentArray2 != null && additionalUnattendContentArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken additionalUnattendContentValue2 in ((JArray)additionalUnattendContentArray2))
                                                {
                                                    AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                    windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                    
                                                    JToken passNameValue = additionalUnattendContentValue2["passName"];
                                                    if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                    {
                                                        string passNameInstance = ((string)passNameValue);
                                                        additionalUnattendContentInstance.PassName = passNameInstance;
                                                    }
                                                    
                                                    JToken componentNameValue = additionalUnattendContentValue2["componentName"];
                                                    if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                    {
                                                        string componentNameInstance = ((string)componentNameValue);
                                                        additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                    }
                                                    
                                                    JToken settingNameValue = additionalUnattendContentValue2["settingName"];
                                                    if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                    {
                                                        string settingNameInstance = ((string)settingNameValue);
                                                        additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                    }
                                                    
                                                    JToken contentValue = additionalUnattendContentValue2["content"];
                                                    if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                    {
                                                        string contentInstance = ((string)contentValue);
                                                        additionalUnattendContentInstance.Content = contentInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken winRMValue2 = windowsConfigurationValue2["winRM"];
                                            if (winRMValue2 != null && winRMValue2.Type != JTokenType.Null)
                                            {
                                                WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                
                                                JToken listenersArray2 = winRMValue2["listeners"];
                                                if (listenersArray2 != null && listenersArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken listenersValue in ((JArray)listenersArray2))
                                                    {
                                                        WinRMListener winRMListenerInstance = new WinRMListener();
                                                        winRMInstance.Listeners.Add(winRMListenerInstance);
                                                        
                                                        JToken protocolValue = listenersValue["protocol"];
                                                        if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                        {
                                                            string protocolInstance = ((string)protocolValue);
                                                            winRMListenerInstance.Protocol = protocolInstance;
                                                        }
                                                        
                                                        JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                        if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                        {
                                                            Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                            winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken linuxConfigurationValue2 = osProfileValue2["linuxConfiguration"];
                                        if (linuxConfigurationValue2 != null && linuxConfigurationValue2.Type != JTokenType.Null)
                                        {
                                            LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                            osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                            
                                            JToken disablePasswordAuthenticationValue = linuxConfigurationValue2["disablePasswordAuthentication"];
                                            if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                            {
                                                bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                            }
                                            
                                            JToken sshValue2 = linuxConfigurationValue2["ssh"];
                                            if (sshValue2 != null && sshValue2.Type != JTokenType.Null)
                                            {
                                                SshConfiguration sshInstance = new SshConfiguration();
                                                linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                
                                                JToken publicKeysArray2 = sshValue2["publicKeys"];
                                                if (publicKeysArray2 != null && publicKeysArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken publicKeysValue in ((JArray)publicKeysArray2))
                                                    {
                                                        SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                        sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                        
                                                        JToken pathValue = publicKeysValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            sshPublicKeyInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken keyDataValue = publicKeysValue["keyData"];
                                                        if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                        {
                                                            string keyDataInstance = ((string)keyDataValue);
                                                            sshPublicKeyInstance.KeyData = keyDataInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken secretsArray2 = osProfileValue2["secrets"];
                                        if (secretsArray2 != null && secretsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken secretsValue in ((JArray)secretsArray2))
                                            {
                                                VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                
                                                JToken sourceVaultValue2 = secretsValue["sourceVault"];
                                                if (sourceVaultValue2 != null && sourceVaultValue2.Type != JTokenType.Null)
                                                {
                                                    SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                    vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                    
                                                    JToken idValue = sourceVaultValue2["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        sourceVaultInstance.ReferenceUri = idInstance;
                                                    }
                                                }
                                                
                                                JToken vaultCertificatesArray2 = secretsValue["vaultCertificates"];
                                                if (vaultCertificatesArray2 != null && vaultCertificatesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray2))
                                                    {
                                                        VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                        vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                        
                                                        JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                        if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                        {
                                                            string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                            vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                        }
                                                        
                                                        JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                        if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                        {
                                                            string certificateStoreInstance = ((string)certificateStoreValue);
                                                            vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken storageProfileValue2 = virtualMachineProfileValue2["storageProfile"];
                                    if (storageProfileValue2 != null && storageProfileValue2.Type != JTokenType.Null)
                                    {
                                        VirtualMachineScaleSetStorageProfile storageProfileInstance = new VirtualMachineScaleSetStorageProfile();
                                        virtualMachineProfileInstance.StorageProfile = storageProfileInstance;
                                        
                                        JToken imageReferenceValue2 = storageProfileValue2["imageReference"];
                                        if (imageReferenceValue2 != null && imageReferenceValue2.Type != JTokenType.Null)
                                        {
                                            ImageReference imageReferenceInstance = new ImageReference();
                                            storageProfileInstance.ImageReference = imageReferenceInstance;
                                            
                                            JToken publisherValue = imageReferenceValue2["publisher"];
                                            if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                            {
                                                string publisherInstance = ((string)publisherValue);
                                                imageReferenceInstance.Publisher = publisherInstance;
                                            }
                                            
                                            JToken offerValue = imageReferenceValue2["offer"];
                                            if (offerValue != null && offerValue.Type != JTokenType.Null)
                                            {
                                                string offerInstance = ((string)offerValue);
                                                imageReferenceInstance.Offer = offerInstance;
                                            }
                                            
                                            JToken skuValue3 = imageReferenceValue2["sku"];
                                            if (skuValue3 != null && skuValue3.Type != JTokenType.Null)
                                            {
                                                string skuInstance2 = ((string)skuValue3);
                                                imageReferenceInstance.Sku = skuInstance2;
                                            }
                                            
                                            JToken versionValue = imageReferenceValue2["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                imageReferenceInstance.Version = versionInstance;
                                            }
                                        }
                                        
                                        JToken osDiskValue2 = storageProfileValue2["osDisk"];
                                        if (osDiskValue2 != null && osDiskValue2.Type != JTokenType.Null)
                                        {
                                            VirtualMachineScaleSetOSDisk osDiskInstance = new VirtualMachineScaleSetOSDisk();
                                            storageProfileInstance.OSDisk = osDiskInstance;
                                            
                                            JToken nameValue2 = osDiskValue2["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                osDiskInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken cachingValue = osDiskValue2["caching"];
                                            if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                            {
                                                string cachingInstance = ((string)cachingValue);
                                                osDiskInstance.Caching = cachingInstance;
                                            }
                                            
                                            JToken createOptionValue = osDiskValue2["createOption"];
                                            if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance = ((string)createOptionValue);
                                                osDiskInstance.CreateOption = createOptionInstance;
                                            }
                                            
                                            JToken osTypeValue = osDiskValue2["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                osDiskInstance.OperatingSystemType = osTypeInstance;
                                            }
                                            
                                            JToken imageValue2 = osDiskValue2["image"];
                                            if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                osDiskInstance.SourceImage = imageInstance;
                                                
                                                JToken uriValue = imageValue2["uri"];
                                                if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                {
                                                    string uriInstance = ((string)uriValue);
                                                    imageInstance.Uri = uriInstance;
                                                }
                                            }
                                            
                                            JToken vhdContainersArray2 = osDiskValue2["vhdContainers"];
                                            if (vhdContainersArray2 != null && vhdContainersArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vhdContainersValue in ((JArray)vhdContainersArray2))
                                                {
                                                    osDiskInstance.VirtualHardDiskContainers.Add(((string)vhdContainersValue));
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken networkProfileValue2 = virtualMachineProfileValue2["networkProfile"];
                                    if (networkProfileValue2 != null && networkProfileValue2.Type != JTokenType.Null)
                                    {
                                        VirtualMachineScaleSetNetworkProfile networkProfileInstance = new VirtualMachineScaleSetNetworkProfile();
                                        virtualMachineProfileInstance.NetworkProfile = networkProfileInstance;
                                        
                                        JToken networkInterfaceConfigurationsArray2 = networkProfileValue2["networkInterfaceConfigurations"];
                                        if (networkInterfaceConfigurationsArray2 != null && networkInterfaceConfigurationsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkInterfaceConfigurationsValue in ((JArray)networkInterfaceConfigurationsArray2))
                                            {
                                                VirtualMachineScaleSetNetworkConfiguration virtualMachineScaleSetNetworkConfigurationJsonInstance = new VirtualMachineScaleSetNetworkConfiguration();
                                                networkProfileInstance.NetworkInterfaceConfigurations.Add(virtualMachineScaleSetNetworkConfigurationJsonInstance);
                                                
                                                JToken nameValue3 = networkInterfaceConfigurationsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    virtualMachineScaleSetNetworkConfigurationJsonInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken propertiesValue6 = networkInterfaceConfigurationsValue["properties"];
                                                if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                {
                                                    JToken primaryValue = propertiesValue6["primary"];
                                                    if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                    {
                                                        bool primaryInstance = ((bool)primaryValue);
                                                        virtualMachineScaleSetNetworkConfigurationJsonInstance.Primary = primaryInstance;
                                                    }
                                                    
                                                    JToken ipConfigurationsArray2 = propertiesValue6["ipConfigurations"];
                                                    if (ipConfigurationsArray2 != null && ipConfigurationsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray2))
                                                        {
                                                            VirtualMachineScaleSetIPConfiguration virtualMachineScaleSetIPConfigurationJsonInstance = new VirtualMachineScaleSetIPConfiguration();
                                                            virtualMachineScaleSetNetworkConfigurationJsonInstance.IPConfigurations.Add(virtualMachineScaleSetIPConfigurationJsonInstance);
                                                            
                                                            JToken nameValue4 = ipConfigurationsValue["name"];
                                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance4 = ((string)nameValue4);
                                                                virtualMachineScaleSetIPConfigurationJsonInstance.Name = nameInstance4;
                                                            }
                                                            
                                                            JToken propertiesValue7 = ipConfigurationsValue["properties"];
                                                            if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                            {
                                                                JToken subnetValue2 = propertiesValue7["subnet"];
                                                                if (subnetValue2 != null && subnetValue2.Type != JTokenType.Null)
                                                                {
                                                                    ApiEntityReference subnetInstance = new ApiEntityReference();
                                                                    virtualMachineScaleSetIPConfigurationJsonInstance.Subnet = subnetInstance;
                                                                    
                                                                    JToken idValue2 = subnetValue2["id"];
                                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                                    {
                                                                        string idInstance2 = ((string)idValue2);
                                                                        subnetInstance.ReferenceUri = idInstance2;
                                                                    }
                                                                }
                                                                
                                                                JToken loadBalancerBackendAddressPoolsArray3 = propertiesValue7["loadBalancerBackendAddressPools"];
                                                                if (loadBalancerBackendAddressPoolsArray3 != null && loadBalancerBackendAddressPoolsArray3.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken loadBalancerBackendAddressPoolsValue in ((JArray)loadBalancerBackendAddressPoolsArray3))
                                                                    {
                                                                        IPConfigurationLoadBalancerAddressPool iPConfigurationLoadBalancerAddressPoolJsonInstance = new IPConfigurationLoadBalancerAddressPool();
                                                                        virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerBackendAddressPools.Add(iPConfigurationLoadBalancerAddressPoolJsonInstance);
                                                                        
                                                                        JToken idValue3 = loadBalancerBackendAddressPoolsValue["id"];
                                                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                                        {
                                                                            string idInstance3 = ((string)idValue3);
                                                                            iPConfigurationLoadBalancerAddressPoolJsonInstance.ReferenceUri = idInstance3;
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken loadBalancerBackendAddressPoolsArray4 = propertiesValue7["loadBalancerBackendAddressPools"];
                                                                if (loadBalancerBackendAddressPoolsArray4 != null && loadBalancerBackendAddressPoolsArray4.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken loadBalancerBackendAddressPoolsValue2 in ((JArray)loadBalancerBackendAddressPoolsArray4))
                                                                    {
                                                                        IPConfigurationLoadBalancerInboundNATPool iPConfigurationLoadBalancerInboundNATPoolJsonInstance = new IPConfigurationLoadBalancerInboundNATPool();
                                                                        virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerInboundNatPools.Add(iPConfigurationLoadBalancerInboundNATPoolJsonInstance);
                                                                        
                                                                        JToken idValue4 = loadBalancerBackendAddressPoolsValue2["id"];
                                                                        if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                                        {
                                                                            string idInstance4 = ((string)idValue4);
                                                                            iPConfigurationLoadBalancerInboundNATPoolJsonInstance.ReferenceUri = idInstance4;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionProfileValue2 = virtualMachineProfileValue2["extensionProfile"];
                                    if (extensionProfileValue2 != null && extensionProfileValue2.Type != JTokenType.Null)
                                    {
                                        VirtualMachineScaleSetExtensionProfile extensionProfileInstance = new VirtualMachineScaleSetExtensionProfile();
                                        virtualMachineProfileInstance.ExtensionProfile = extensionProfileInstance;
                                        
                                        JToken extensionsArray2 = extensionProfileValue2["extensions"];
                                        if (extensionsArray2 != null && extensionsArray2.Type != JTokenType.Null)
                                        {
                                            extensionProfileInstance.Extensions = new List<VirtualMachineScaleSetExtension>();
                                            foreach (JToken extensionsValue in ((JArray)extensionsArray2))
                                            {
                                                VirtualMachineScaleSetExtension virtualMachineScaleSetExtensionJsonInstance = new VirtualMachineScaleSetExtension();
                                                extensionProfileInstance.Extensions.Add(virtualMachineScaleSetExtensionJsonInstance);
                                                
                                                JToken propertiesValue8 = extensionsValue["properties"];
                                                if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                {
                                                    JToken publisherValue2 = propertiesValue8["publisher"];
                                                    if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                    {
                                                        string publisherInstance2 = ((string)publisherValue2);
                                                        virtualMachineScaleSetExtensionJsonInstance.Publisher = publisherInstance2;
                                                    }
                                                    
                                                    JToken typeValue = propertiesValue8["type"];
                                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance = ((string)typeValue);
                                                        virtualMachineScaleSetExtensionJsonInstance.ExtensionType = typeInstance;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue = propertiesValue8["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                        virtualMachineScaleSetExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                    }
                                                    
                                                    JToken autoUpgradeMinorVersionValue = propertiesValue8["autoUpgradeMinorVersion"];
                                                    if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                        virtualMachineScaleSetExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                    }
                                                    
                                                    JToken settingsValue = propertiesValue8["settings"];
                                                    if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                    {
                                                        string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                        virtualMachineScaleSetExtensionJsonInstance.Settings = settingsInstance;
                                                    }
                                                    
                                                    JToken protectedSettingsValue = propertiesValue8["protectedSettings"];
                                                    if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                    {
                                                        string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                        virtualMachineScaleSetExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue8["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        virtualMachineScaleSetExtensionJsonInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken idValue5 = extensionsValue["id"];
                                                if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                {
                                                    string idInstance5 = ((string)idValue5);
                                                    virtualMachineScaleSetExtensionJsonInstance.Id = idInstance5;
                                                }
                                                
                                                JToken nameValue5 = extensionsValue["name"];
                                                if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                {
                                                    string nameInstance5 = ((string)nameValue5);
                                                    virtualMachineScaleSetExtensionJsonInstance.Name = nameInstance5;
                                                }
                                                
                                                JToken typeValue2 = extensionsValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    virtualMachineScaleSetExtensionJsonInstance.Type = typeInstance2;
                                                }
                                                
                                                JToken locationValue = extensionsValue["location"];
                                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                {
                                                    string locationInstance = ((string)locationValue);
                                                    virtualMachineScaleSetExtensionJsonInstance.Location = locationInstance;
                                                }
                                                
                                                JToken tagsSequenceElement = ((JToken)extensionsValue["tags"]);
                                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in tagsSequenceElement)
                                                    {
                                                        string tagsKey3 = ((string)property.Name);
                                                        string tagsValue3 = ((string)property.Value);
                                                        virtualMachineScaleSetExtensionJsonInstance.Tags.Add(tagsKey3, tagsValue3);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue5["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    virtualMachineScaleSetInstance.ProvisioningState = provisioningStateInstance2;
                                }
                            }
                            
                            JToken idValue6 = responseDoc["id"];
                            if (idValue6 != null && idValue6.Type != JTokenType.Null)
                            {
                                string idInstance6 = ((string)idValue6);
                                virtualMachineScaleSetInstance.Id = idInstance6;
                            }
                            
                            JToken nameValue6 = responseDoc["name"];
                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                            {
                                string nameInstance6 = ((string)nameValue6);
                                virtualMachineScaleSetInstance.Name = nameInstance6;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                virtualMachineScaleSetInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                virtualMachineScaleSetInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey4 = ((string)property2.Name);
                                    string tagsValue4 = ((string)property2.Value);
                                    virtualMachineScaleSetInstance.Tags.Add(tagsKey4, tagsValue4);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to deallocate a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginDeallocatingAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "BeginDeallocatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/deallocate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to deallocate virtual machines in a virtual machine
        /// scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginDeallocatingInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (vmInstanceIDs == null)
            {
                throw new ArgumentNullException("vmInstanceIDs");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "BeginDeallocatingInstancesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/deallocate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineScaleSetVMInstanceIDsJsonValue = new JObject();
                requestDoc = virtualMachineScaleSetVMInstanceIDsJsonValue;
                
                if (vmInstanceIDs.InstanceIDs != null)
                {
                    if (vmInstanceIDs.InstanceIDs is ILazyCollection == false || ((ILazyCollection)vmInstanceIDs.InstanceIDs).IsInitialized)
                    {
                        JArray instanceIdsArray = new JArray();
                        foreach (string instanceIdsItem in vmInstanceIDs.InstanceIDs)
                        {
                            instanceIdsArray.Add(instanceIdsItem);
                        }
                        virtualMachineScaleSetVMInstanceIDsJsonValue["instanceIds"] = instanceIdsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to delete a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> BeginDeletingAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeleteOperationResponse result = null;
                    // Deserialize Response
                    result = new DeleteOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to delete virtual machines in a virtual machine scale
        /// set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginDeletingInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (vmInstanceIDs == null)
            {
                throw new ArgumentNullException("vmInstanceIDs");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingInstancesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/delete";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineScaleSetVMInstanceIDsJsonValue = new JObject();
                requestDoc = virtualMachineScaleSetVMInstanceIDsJsonValue;
                
                if (vmInstanceIDs.InstanceIDs != null)
                {
                    if (vmInstanceIDs.InstanceIDs is ILazyCollection == false || ((ILazyCollection)vmInstanceIDs.InstanceIDs).IsInitialized)
                    {
                        JArray instanceIdsArray = new JArray();
                        foreach (string instanceIdsItem in vmInstanceIDs.InstanceIDs)
                        {
                            instanceIdsArray.Add(instanceIdsItem);
                        }
                        virtualMachineScaleSetVMInstanceIDsJsonValue["instanceIds"] = instanceIdsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginPoweringOffAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "BeginPoweringOffAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/poweroff";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to power off (stop) virtual machines in a virtual
        /// machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginPoweringOffInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (vmInstanceIDs == null)
            {
                throw new ArgumentNullException("vmInstanceIDs");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "BeginPoweringOffInstancesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/poweroff";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineScaleSetVMInstanceIDsJsonValue = new JObject();
                requestDoc = virtualMachineScaleSetVMInstanceIDsJsonValue;
                
                if (vmInstanceIDs.InstanceIDs != null)
                {
                    if (vmInstanceIDs.InstanceIDs is ILazyCollection == false || ((ILazyCollection)vmInstanceIDs.InstanceIDs).IsInitialized)
                    {
                        JArray instanceIdsArray = new JArray();
                        foreach (string instanceIdsItem in vmInstanceIDs.InstanceIDs)
                        {
                            instanceIdsArray.Add(instanceIdsItem);
                        }
                        virtualMachineScaleSetVMInstanceIDsJsonValue["instanceIds"] = instanceIdsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to restart a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginRestartingAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to restart virtual machines in a virtual machine
        /// scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginRestartingInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (vmInstanceIDs == null)
            {
                throw new ArgumentNullException("vmInstanceIDs");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingInstancesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineScaleSetVMInstanceIDsJsonValue = new JObject();
                requestDoc = virtualMachineScaleSetVMInstanceIDsJsonValue;
                
                if (vmInstanceIDs.InstanceIDs != null)
                {
                    if (vmInstanceIDs.InstanceIDs is ILazyCollection == false || ((ILazyCollection)vmInstanceIDs.InstanceIDs).IsInitialized)
                    {
                        JArray instanceIdsArray = new JArray();
                        foreach (string instanceIdsItem in vmInstanceIDs.InstanceIDs)
                        {
                            instanceIdsArray.Add(instanceIdsItem);
                        }
                        virtualMachineScaleSetVMInstanceIDsJsonValue["instanceIds"] = instanceIdsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to start a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginStartingAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "BeginStartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/start";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to start virtual machines in a virtual machine scale
        /// set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginStartingInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (vmInstanceIDs == null)
            {
                throw new ArgumentNullException("vmInstanceIDs");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "BeginStartingInstancesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/start";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineScaleSetVMInstanceIDsJsonValue = new JObject();
                requestDoc = virtualMachineScaleSetVMInstanceIDsJsonValue;
                
                if (vmInstanceIDs.InstanceIDs != null)
                {
                    if (vmInstanceIDs.InstanceIDs is ILazyCollection == false || ((ILazyCollection)vmInstanceIDs.InstanceIDs).IsInitialized)
                    {
                        JArray instanceIdsArray = new JArray();
                        foreach (string instanceIdsItem in vmInstanceIDs.InstanceIDs)
                        {
                            instanceIdsArray.Add(instanceIdsItem);
                        }
                        virtualMachineScaleSetVMInstanceIDsJsonValue["instanceIds"] = instanceIdsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to manually upgrade virtual machines in a virtual
        /// machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginUpdatingInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (vmInstanceIDs == null)
            {
                throw new ArgumentNullException("vmInstanceIDs");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingInstancesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/manualupgrade";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineScaleSetVMInstanceIDsJsonValue = new JObject();
                requestDoc = virtualMachineScaleSetVMInstanceIDsJsonValue;
                
                if (vmInstanceIDs.InstanceIDs != null)
                {
                    if (vmInstanceIDs.InstanceIDs is ILazyCollection == false || ((ILazyCollection)vmInstanceIDs.InstanceIDs).IsInitialized)
                    {
                        JArray instanceIdsArray = new JArray();
                        foreach (string instanceIdsItem in vmInstanceIDs.InstanceIDs)
                        {
                            instanceIdsArray.Add(instanceIdsItem);
                        }
                        virtualMachineScaleSetVMInstanceIDsJsonValue["instanceIds"] = instanceIdsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine Scale
        /// Set operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(string resourceGroupName, VirtualMachineScaleSet parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            VirtualMachineScaleSetCreateOrUpdateResponse response = await client.VirtualMachineScaleSets.BeginCreatingOrUpdatingAsync(resourceGroupName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to deallocate a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> DeallocateAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "DeallocateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginDeallocatingAsync(resourceGroupName, vmScaleSetName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to deallocate virtual machines in a virtual machine
        /// scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> DeallocateInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "DeallocateInstancesAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginDeallocatingInstancesAsync(resourceGroupName, vmScaleSetName, vmInstanceIDs, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to delete a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> DeleteAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse response = await client.VirtualMachineScaleSets.BeginDeletingAsync(resourceGroupName, vmScaleSetName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to delete virtual machines in a virtual machine scale
        /// set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> DeleteInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "DeleteInstancesAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginDeletingInstancesAsync(resourceGroupName, vmScaleSetName, vmInstanceIDs, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to get a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetVirtualMachineScaleSet operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetGetResponse> GetAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineScaleSet virtualMachineScaleSetInstance = new VirtualMachineScaleSet();
                            result.VirtualMachineScaleSet = virtualMachineScaleSetInstance;
                            
                            JToken skuValue = responseDoc["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                Sku skuInstance = new Sku();
                                virtualMachineScaleSetInstance.Sku = skuInstance;
                                
                                JToken nameValue = skuValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    skuInstance.Name = nameInstance;
                                }
                                
                                JToken tierValue = skuValue["tier"];
                                if (tierValue != null && tierValue.Type != JTokenType.Null)
                                {
                                    string tierInstance = ((string)tierValue);
                                    skuInstance.Tier = tierInstance;
                                }
                                
                                JToken capacityValue = skuValue["capacity"];
                                if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                {
                                    uint capacityInstance = ((uint)capacityValue);
                                    skuInstance.Capacity = capacityInstance;
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken upgradePolicyValue = propertiesValue["upgradePolicy"];
                                if (upgradePolicyValue != null && upgradePolicyValue.Type != JTokenType.Null)
                                {
                                    UpgradePolicy upgradePolicyInstance = new UpgradePolicy();
                                    virtualMachineScaleSetInstance.UpgradePolicy = upgradePolicyInstance;
                                    
                                    JToken modeValue = upgradePolicyValue["mode"];
                                    if (modeValue != null && modeValue.Type != JTokenType.Null)
                                    {
                                        string modeInstance = ((string)modeValue);
                                        upgradePolicyInstance.Mode = modeInstance;
                                    }
                                }
                                
                                JToken virtualMachineProfileValue = propertiesValue["virtualMachineProfile"];
                                if (virtualMachineProfileValue != null && virtualMachineProfileValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineScaleSetVMProfile virtualMachineProfileInstance = new VirtualMachineScaleSetVMProfile();
                                    virtualMachineScaleSetInstance.VirtualMachineProfile = virtualMachineProfileInstance;
                                    
                                    JToken osProfileValue = virtualMachineProfileValue["osProfile"];
                                    if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                    {
                                        VirtualMachineScaleSetOSProfile osProfileInstance = new VirtualMachineScaleSetOSProfile();
                                        virtualMachineProfileInstance.OSProfile = osProfileInstance;
                                        
                                        JToken computerNamePrefixValue = osProfileValue["computerNamePrefix"];
                                        if (computerNamePrefixValue != null && computerNamePrefixValue.Type != JTokenType.Null)
                                        {
                                            string computerNamePrefixInstance = ((string)computerNamePrefixValue);
                                            osProfileInstance.ComputerNamePrefix = computerNamePrefixInstance;
                                        }
                                        
                                        JToken adminUsernameValue = osProfileValue["adminUsername"];
                                        if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                        {
                                            string adminUsernameInstance = ((string)adminUsernameValue);
                                            osProfileInstance.AdminUsername = adminUsernameInstance;
                                        }
                                        
                                        JToken adminPasswordValue = osProfileValue["adminPassword"];
                                        if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                        {
                                            string adminPasswordInstance = ((string)adminPasswordValue);
                                            osProfileInstance.AdminPassword = adminPasswordInstance;
                                        }
                                        
                                        JToken customDataValue = osProfileValue["customData"];
                                        if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                        {
                                            string customDataInstance = ((string)customDataValue);
                                            osProfileInstance.CustomData = customDataInstance;
                                        }
                                        
                                        JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                        if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                        {
                                            WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                            osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                            
                                            JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                            if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                            {
                                                bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                            }
                                            
                                            JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                            if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                            {
                                                bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                            }
                                            
                                            JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                            if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                            {
                                                string timeZoneInstance = ((string)timeZoneValue);
                                                windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                            }
                                            
                                            JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                            if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                {
                                                    AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                    windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                    
                                                    JToken passNameValue = additionalUnattendContentValue["passName"];
                                                    if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                    {
                                                        string passNameInstance = ((string)passNameValue);
                                                        additionalUnattendContentInstance.PassName = passNameInstance;
                                                    }
                                                    
                                                    JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                    if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                    {
                                                        string componentNameInstance = ((string)componentNameValue);
                                                        additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                    }
                                                    
                                                    JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                    if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                    {
                                                        string settingNameInstance = ((string)settingNameValue);
                                                        additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                    }
                                                    
                                                    JToken contentValue = additionalUnattendContentValue["content"];
                                                    if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                    {
                                                        string contentInstance = ((string)contentValue);
                                                        additionalUnattendContentInstance.Content = contentInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken winRMValue = windowsConfigurationValue["winRM"];
                                            if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                            {
                                                WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                
                                                JToken listenersArray = winRMValue["listeners"];
                                                if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken listenersValue in ((JArray)listenersArray))
                                                    {
                                                        WinRMListener winRMListenerInstance = new WinRMListener();
                                                        winRMInstance.Listeners.Add(winRMListenerInstance);
                                                        
                                                        JToken protocolValue = listenersValue["protocol"];
                                                        if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                        {
                                                            string protocolInstance = ((string)protocolValue);
                                                            winRMListenerInstance.Protocol = protocolInstance;
                                                        }
                                                        
                                                        JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                        if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                        {
                                                            Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                            winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                        if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                        {
                                            LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                            osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                            
                                            JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                            if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                            {
                                                bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                            }
                                            
                                            JToken sshValue = linuxConfigurationValue["ssh"];
                                            if (sshValue != null && sshValue.Type != JTokenType.Null)
                                            {
                                                SshConfiguration sshInstance = new SshConfiguration();
                                                linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                
                                                JToken publicKeysArray = sshValue["publicKeys"];
                                                if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                    {
                                                        SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                        sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                        
                                                        JToken pathValue = publicKeysValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            sshPublicKeyInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken keyDataValue = publicKeysValue["keyData"];
                                                        if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                        {
                                                            string keyDataInstance = ((string)keyDataValue);
                                                            sshPublicKeyInstance.KeyData = keyDataInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken secretsArray = osProfileValue["secrets"];
                                        if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken secretsValue in ((JArray)secretsArray))
                                            {
                                                VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                
                                                JToken sourceVaultValue = secretsValue["sourceVault"];
                                                if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                {
                                                    SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                    vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                    
                                                    JToken idValue = sourceVaultValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        sourceVaultInstance.ReferenceUri = idInstance;
                                                    }
                                                }
                                                
                                                JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                    {
                                                        VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                        vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                        
                                                        JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                        if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                        {
                                                            string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                            vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                        }
                                                        
                                                        JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                        if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                        {
                                                            string certificateStoreInstance = ((string)certificateStoreValue);
                                                            vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken storageProfileValue = virtualMachineProfileValue["storageProfile"];
                                    if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                    {
                                        VirtualMachineScaleSetStorageProfile storageProfileInstance = new VirtualMachineScaleSetStorageProfile();
                                        virtualMachineProfileInstance.StorageProfile = storageProfileInstance;
                                        
                                        JToken imageReferenceValue = storageProfileValue["imageReference"];
                                        if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                        {
                                            ImageReference imageReferenceInstance = new ImageReference();
                                            storageProfileInstance.ImageReference = imageReferenceInstance;
                                            
                                            JToken publisherValue = imageReferenceValue["publisher"];
                                            if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                            {
                                                string publisherInstance = ((string)publisherValue);
                                                imageReferenceInstance.Publisher = publisherInstance;
                                            }
                                            
                                            JToken offerValue = imageReferenceValue["offer"];
                                            if (offerValue != null && offerValue.Type != JTokenType.Null)
                                            {
                                                string offerInstance = ((string)offerValue);
                                                imageReferenceInstance.Offer = offerInstance;
                                            }
                                            
                                            JToken skuValue2 = imageReferenceValue["sku"];
                                            if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                                            {
                                                string skuInstance2 = ((string)skuValue2);
                                                imageReferenceInstance.Sku = skuInstance2;
                                            }
                                            
                                            JToken versionValue = imageReferenceValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                imageReferenceInstance.Version = versionInstance;
                                            }
                                        }
                                        
                                        JToken osDiskValue = storageProfileValue["osDisk"];
                                        if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineScaleSetOSDisk osDiskInstance = new VirtualMachineScaleSetOSDisk();
                                            storageProfileInstance.OSDisk = osDiskInstance;
                                            
                                            JToken nameValue2 = osDiskValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                osDiskInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken cachingValue = osDiskValue["caching"];
                                            if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                            {
                                                string cachingInstance = ((string)cachingValue);
                                                osDiskInstance.Caching = cachingInstance;
                                            }
                                            
                                            JToken createOptionValue = osDiskValue["createOption"];
                                            if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance = ((string)createOptionValue);
                                                osDiskInstance.CreateOption = createOptionInstance;
                                            }
                                            
                                            JToken osTypeValue = osDiskValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                osDiskInstance.OperatingSystemType = osTypeInstance;
                                            }
                                            
                                            JToken imageValue = osDiskValue["image"];
                                            if (imageValue != null && imageValue.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                osDiskInstance.SourceImage = imageInstance;
                                                
                                                JToken uriValue = imageValue["uri"];
                                                if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                {
                                                    string uriInstance = ((string)uriValue);
                                                    imageInstance.Uri = uriInstance;
                                                }
                                            }
                                            
                                            JToken vhdContainersArray = osDiskValue["vhdContainers"];
                                            if (vhdContainersArray != null && vhdContainersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vhdContainersValue in ((JArray)vhdContainersArray))
                                                {
                                                    osDiskInstance.VirtualHardDiskContainers.Add(((string)vhdContainersValue));
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken networkProfileValue = virtualMachineProfileValue["networkProfile"];
                                    if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                    {
                                        VirtualMachineScaleSetNetworkProfile networkProfileInstance = new VirtualMachineScaleSetNetworkProfile();
                                        virtualMachineProfileInstance.NetworkProfile = networkProfileInstance;
                                        
                                        JToken networkInterfaceConfigurationsArray = networkProfileValue["networkInterfaceConfigurations"];
                                        if (networkInterfaceConfigurationsArray != null && networkInterfaceConfigurationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkInterfaceConfigurationsValue in ((JArray)networkInterfaceConfigurationsArray))
                                            {
                                                VirtualMachineScaleSetNetworkConfiguration virtualMachineScaleSetNetworkConfigurationJsonInstance = new VirtualMachineScaleSetNetworkConfiguration();
                                                networkProfileInstance.NetworkInterfaceConfigurations.Add(virtualMachineScaleSetNetworkConfigurationJsonInstance);
                                                
                                                JToken nameValue3 = networkInterfaceConfigurationsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    virtualMachineScaleSetNetworkConfigurationJsonInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken propertiesValue2 = networkInterfaceConfigurationsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    JToken primaryValue = propertiesValue2["primary"];
                                                    if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                    {
                                                        bool primaryInstance = ((bool)primaryValue);
                                                        virtualMachineScaleSetNetworkConfigurationJsonInstance.Primary = primaryInstance;
                                                    }
                                                    
                                                    JToken ipConfigurationsArray = propertiesValue2["ipConfigurations"];
                                                    if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                                        {
                                                            VirtualMachineScaleSetIPConfiguration virtualMachineScaleSetIPConfigurationJsonInstance = new VirtualMachineScaleSetIPConfiguration();
                                                            virtualMachineScaleSetNetworkConfigurationJsonInstance.IPConfigurations.Add(virtualMachineScaleSetIPConfigurationJsonInstance);
                                                            
                                                            JToken nameValue4 = ipConfigurationsValue["name"];
                                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance4 = ((string)nameValue4);
                                                                virtualMachineScaleSetIPConfigurationJsonInstance.Name = nameInstance4;
                                                            }
                                                            
                                                            JToken propertiesValue3 = ipConfigurationsValue["properties"];
                                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                            {
                                                                JToken subnetValue = propertiesValue3["subnet"];
                                                                if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                                {
                                                                    ApiEntityReference subnetInstance = new ApiEntityReference();
                                                                    virtualMachineScaleSetIPConfigurationJsonInstance.Subnet = subnetInstance;
                                                                    
                                                                    JToken idValue2 = subnetValue["id"];
                                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                                    {
                                                                        string idInstance2 = ((string)idValue2);
                                                                        subnetInstance.ReferenceUri = idInstance2;
                                                                    }
                                                                }
                                                                
                                                                JToken loadBalancerBackendAddressPoolsArray = propertiesValue3["loadBalancerBackendAddressPools"];
                                                                if (loadBalancerBackendAddressPoolsArray != null && loadBalancerBackendAddressPoolsArray.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken loadBalancerBackendAddressPoolsValue in ((JArray)loadBalancerBackendAddressPoolsArray))
                                                                    {
                                                                        IPConfigurationLoadBalancerAddressPool iPConfigurationLoadBalancerAddressPoolJsonInstance = new IPConfigurationLoadBalancerAddressPool();
                                                                        virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerBackendAddressPools.Add(iPConfigurationLoadBalancerAddressPoolJsonInstance);
                                                                        
                                                                        JToken idValue3 = loadBalancerBackendAddressPoolsValue["id"];
                                                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                                        {
                                                                            string idInstance3 = ((string)idValue3);
                                                                            iPConfigurationLoadBalancerAddressPoolJsonInstance.ReferenceUri = idInstance3;
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken loadBalancerBackendAddressPoolsArray2 = propertiesValue3["loadBalancerBackendAddressPools"];
                                                                if (loadBalancerBackendAddressPoolsArray2 != null && loadBalancerBackendAddressPoolsArray2.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken loadBalancerBackendAddressPoolsValue2 in ((JArray)loadBalancerBackendAddressPoolsArray2))
                                                                    {
                                                                        IPConfigurationLoadBalancerInboundNATPool iPConfigurationLoadBalancerInboundNATPoolJsonInstance = new IPConfigurationLoadBalancerInboundNATPool();
                                                                        virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerInboundNatPools.Add(iPConfigurationLoadBalancerInboundNATPoolJsonInstance);
                                                                        
                                                                        JToken idValue4 = loadBalancerBackendAddressPoolsValue2["id"];
                                                                        if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                                        {
                                                                            string idInstance4 = ((string)idValue4);
                                                                            iPConfigurationLoadBalancerInboundNATPoolJsonInstance.ReferenceUri = idInstance4;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionProfileValue = virtualMachineProfileValue["extensionProfile"];
                                    if (extensionProfileValue != null && extensionProfileValue.Type != JTokenType.Null)
                                    {
                                        VirtualMachineScaleSetExtensionProfile extensionProfileInstance = new VirtualMachineScaleSetExtensionProfile();
                                        virtualMachineProfileInstance.ExtensionProfile = extensionProfileInstance;
                                        
                                        JToken extensionsArray = extensionProfileValue["extensions"];
                                        if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                        {
                                            extensionProfileInstance.Extensions = new List<VirtualMachineScaleSetExtension>();
                                            foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                            {
                                                VirtualMachineScaleSetExtension virtualMachineScaleSetExtensionJsonInstance = new VirtualMachineScaleSetExtension();
                                                extensionProfileInstance.Extensions.Add(virtualMachineScaleSetExtensionJsonInstance);
                                                
                                                JToken propertiesValue4 = extensionsValue["properties"];
                                                if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                {
                                                    JToken publisherValue2 = propertiesValue4["publisher"];
                                                    if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                    {
                                                        string publisherInstance2 = ((string)publisherValue2);
                                                        virtualMachineScaleSetExtensionJsonInstance.Publisher = publisherInstance2;
                                                    }
                                                    
                                                    JToken typeValue = propertiesValue4["type"];
                                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance = ((string)typeValue);
                                                        virtualMachineScaleSetExtensionJsonInstance.ExtensionType = typeInstance;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue = propertiesValue4["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                        virtualMachineScaleSetExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                    }
                                                    
                                                    JToken autoUpgradeMinorVersionValue = propertiesValue4["autoUpgradeMinorVersion"];
                                                    if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                        virtualMachineScaleSetExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                    }
                                                    
                                                    JToken settingsValue = propertiesValue4["settings"];
                                                    if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                    {
                                                        string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                        virtualMachineScaleSetExtensionJsonInstance.Settings = settingsInstance;
                                                    }
                                                    
                                                    JToken protectedSettingsValue = propertiesValue4["protectedSettings"];
                                                    if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                    {
                                                        string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                        virtualMachineScaleSetExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue4["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        virtualMachineScaleSetExtensionJsonInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken idValue5 = extensionsValue["id"];
                                                if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                {
                                                    string idInstance5 = ((string)idValue5);
                                                    virtualMachineScaleSetExtensionJsonInstance.Id = idInstance5;
                                                }
                                                
                                                JToken nameValue5 = extensionsValue["name"];
                                                if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                {
                                                    string nameInstance5 = ((string)nameValue5);
                                                    virtualMachineScaleSetExtensionJsonInstance.Name = nameInstance5;
                                                }
                                                
                                                JToken typeValue2 = extensionsValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    virtualMachineScaleSetExtensionJsonInstance.Type = typeInstance2;
                                                }
                                                
                                                JToken locationValue = extensionsValue["location"];
                                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                {
                                                    string locationInstance = ((string)locationValue);
                                                    virtualMachineScaleSetExtensionJsonInstance.Location = locationInstance;
                                                }
                                                
                                                JToken tagsSequenceElement = ((JToken)extensionsValue["tags"]);
                                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in tagsSequenceElement)
                                                    {
                                                        string tagsKey = ((string)property.Name);
                                                        string tagsValue = ((string)property.Value);
                                                        virtualMachineScaleSetExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    virtualMachineScaleSetInstance.ProvisioningState = provisioningStateInstance2;
                                }
                            }
                            
                            JToken idValue6 = responseDoc["id"];
                            if (idValue6 != null && idValue6.Type != JTokenType.Null)
                            {
                                string idInstance6 = ((string)idValue6);
                                virtualMachineScaleSetInstance.Id = idInstance6;
                            }
                            
                            JToken nameValue6 = responseDoc["name"];
                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                            {
                                string nameInstance6 = ((string)nameValue6);
                                virtualMachineScaleSetInstance.Name = nameInstance6;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                virtualMachineScaleSetInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                virtualMachineScaleSetInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    virtualMachineScaleSetInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get a virtual machine scale set instance view.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get VirtualMachineScaleSet instance view operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetGetInstanceViewResponse> GetInstanceViewAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "GetInstanceViewAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/instanceView";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetGetInstanceViewResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetGetInstanceViewResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineScaleSetInstanceView virtualMachineScaleSetInstanceViewInstance = new VirtualMachineScaleSetInstanceView();
                            result.VirtualMachineScaleSetInstanceView = virtualMachineScaleSetInstanceViewInstance;
                            
                            JToken virtualMachineValue = responseDoc["virtualMachine"];
                            if (virtualMachineValue != null && virtualMachineValue.Type != JTokenType.Null)
                            {
                                VirtualMachineScaleSetInstanceViewStatusesSummary virtualMachineInstance = new VirtualMachineScaleSetInstanceViewStatusesSummary();
                                virtualMachineScaleSetInstanceViewInstance.VirtualMachine = virtualMachineInstance;
                                
                                JToken statusesSummaryArray = virtualMachineValue["statusesSummary"];
                                if (statusesSummaryArray != null && statusesSummaryArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken statusesSummaryValue in ((JArray)statusesSummaryArray))
                                    {
                                        VirtualMachineStatusCodeCount virtualMachineStatusCodeCountInstance = new VirtualMachineStatusCodeCount();
                                        virtualMachineInstance.StatusesSummary.Add(virtualMachineStatusCodeCountInstance);
                                        
                                        JToken codeValue = statusesSummaryValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            virtualMachineStatusCodeCountInstance.Code = codeInstance;
                                        }
                                        
                                        JToken countValue = statusesSummaryValue["count"];
                                        if (countValue != null && countValue.Type != JTokenType.Null)
                                        {
                                            int countInstance = ((int)countValue);
                                            virtualMachineStatusCodeCountInstance.Count = countInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken extensionsArray = responseDoc["extensions"];
                            if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                {
                                    VirtualMachineScaleSetVMExtensionsSummary virtualMachineScaleSetVMExtensionsSummaryInstance = new VirtualMachineScaleSetVMExtensionsSummary();
                                    virtualMachineScaleSetInstanceViewInstance.Extensions.Add(virtualMachineScaleSetVMExtensionsSummaryInstance);
                                    
                                    JToken nameValue = extensionsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineScaleSetVMExtensionsSummaryInstance.Name = nameInstance;
                                    }
                                    
                                    JToken statusesSummaryArray2 = extensionsValue["statusesSummary"];
                                    if (statusesSummaryArray2 != null && statusesSummaryArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesSummaryValue2 in ((JArray)statusesSummaryArray2))
                                        {
                                            VirtualMachineStatusCodeCount virtualMachineStatusCodeCountInstance2 = new VirtualMachineStatusCodeCount();
                                            virtualMachineScaleSetVMExtensionsSummaryInstance.StatusesSummary.Add(virtualMachineStatusCodeCountInstance2);
                                            
                                            JToken codeValue2 = statusesSummaryValue2["code"];
                                            if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                            {
                                                string codeInstance2 = ((string)codeValue2);
                                                virtualMachineStatusCodeCountInstance2.Code = codeInstance2;
                                            }
                                            
                                            JToken countValue2 = statusesSummaryValue2["count"];
                                            if (countValue2 != null && countValue2.Type != JTokenType.Null)
                                            {
                                                int countInstance2 = ((int)countValue2);
                                                virtualMachineStatusCodeCountInstance2.Count = countInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken statusesArray = responseDoc["statuses"];
                            if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken statusesValue in ((JArray)statusesArray))
                                {
                                    InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                    virtualMachineScaleSetInstanceViewInstance.Statuses.Add(instanceViewStatusInstance);
                                    
                                    JToken codeValue3 = statusesValue["code"];
                                    if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                    {
                                        string codeInstance3 = ((string)codeValue3);
                                        instanceViewStatusInstance.Code = codeInstance3;
                                    }
                                    
                                    JToken levelValue = statusesValue["level"];
                                    if (levelValue != null && levelValue.Type != JTokenType.Null)
                                    {
                                        string levelInstance = ((string)levelValue);
                                        instanceViewStatusInstance.Level = levelInstance;
                                    }
                                    
                                    JToken displayStatusValue = statusesValue["displayStatus"];
                                    if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                    {
                                        string displayStatusInstance = ((string)displayStatusValue);
                                        instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                    }
                                    
                                    JToken messageValue = statusesValue["message"];
                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                    {
                                        string messageInstance = ((string)messageValue);
                                        instanceViewStatusInstance.Message = messageInstance;
                                    }
                                    
                                    JToken timeValue = statusesValue["time"];
                                    if (timeValue != null && timeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                        instanceViewStatusInstance.Time = timeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to list virtual machine scale sets under a resource
        /// group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineScaleSet virtualMachineScaleSetJsonInstance = new VirtualMachineScaleSet();
                                    result.VirtualMachineScaleSets.Add(virtualMachineScaleSetJsonInstance);
                                    
                                    JToken skuValue = valueValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        Sku skuInstance = new Sku();
                                        virtualMachineScaleSetJsonInstance.Sku = skuInstance;
                                        
                                        JToken nameValue = skuValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            skuInstance.Name = nameInstance;
                                        }
                                        
                                        JToken tierValue = skuValue["tier"];
                                        if (tierValue != null && tierValue.Type != JTokenType.Null)
                                        {
                                            string tierInstance = ((string)tierValue);
                                            skuInstance.Tier = tierInstance;
                                        }
                                        
                                        JToken capacityValue = skuValue["capacity"];
                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                        {
                                            uint capacityInstance = ((uint)capacityValue);
                                            skuInstance.Capacity = capacityInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken upgradePolicyValue = propertiesValue["upgradePolicy"];
                                        if (upgradePolicyValue != null && upgradePolicyValue.Type != JTokenType.Null)
                                        {
                                            UpgradePolicy upgradePolicyInstance = new UpgradePolicy();
                                            virtualMachineScaleSetJsonInstance.UpgradePolicy = upgradePolicyInstance;
                                            
                                            JToken modeValue = upgradePolicyValue["mode"];
                                            if (modeValue != null && modeValue.Type != JTokenType.Null)
                                            {
                                                string modeInstance = ((string)modeValue);
                                                upgradePolicyInstance.Mode = modeInstance;
                                            }
                                        }
                                        
                                        JToken virtualMachineProfileValue = propertiesValue["virtualMachineProfile"];
                                        if (virtualMachineProfileValue != null && virtualMachineProfileValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineScaleSetVMProfile virtualMachineProfileInstance = new VirtualMachineScaleSetVMProfile();
                                            virtualMachineScaleSetJsonInstance.VirtualMachineProfile = virtualMachineProfileInstance;
                                            
                                            JToken osProfileValue = virtualMachineProfileValue["osProfile"];
                                            if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetOSProfile osProfileInstance = new VirtualMachineScaleSetOSProfile();
                                                virtualMachineProfileInstance.OSProfile = osProfileInstance;
                                                
                                                JToken computerNamePrefixValue = osProfileValue["computerNamePrefix"];
                                                if (computerNamePrefixValue != null && computerNamePrefixValue.Type != JTokenType.Null)
                                                {
                                                    string computerNamePrefixInstance = ((string)computerNamePrefixValue);
                                                    osProfileInstance.ComputerNamePrefix = computerNamePrefixInstance;
                                                }
                                                
                                                JToken adminUsernameValue = osProfileValue["adminUsername"];
                                                if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                                {
                                                    string adminUsernameInstance = ((string)adminUsernameValue);
                                                    osProfileInstance.AdminUsername = adminUsernameInstance;
                                                }
                                                
                                                JToken adminPasswordValue = osProfileValue["adminPassword"];
                                                if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                                {
                                                    string adminPasswordInstance = ((string)adminPasswordValue);
                                                    osProfileInstance.AdminPassword = adminPasswordInstance;
                                                }
                                                
                                                JToken customDataValue = osProfileValue["customData"];
                                                if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                                {
                                                    string customDataInstance = ((string)customDataValue);
                                                    osProfileInstance.CustomData = customDataInstance;
                                                }
                                                
                                                JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                                if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                                {
                                                    WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                                    osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                                    
                                                    JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                                    if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                                    {
                                                        bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                        windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                                    }
                                                    
                                                    JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                                    if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                                    {
                                                        bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                        windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                    }
                                                    
                                                    JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                                    if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                    {
                                                        string timeZoneInstance = ((string)timeZoneValue);
                                                        windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                                    }
                                                    
                                                    JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                                    if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                        {
                                                            AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                            windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                            
                                                            JToken passNameValue = additionalUnattendContentValue["passName"];
                                                            if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                            {
                                                                string passNameInstance = ((string)passNameValue);
                                                                additionalUnattendContentInstance.PassName = passNameInstance;
                                                            }
                                                            
                                                            JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                            if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                            {
                                                                string componentNameInstance = ((string)componentNameValue);
                                                                additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                            }
                                                            
                                                            JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                            if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                            {
                                                                string settingNameInstance = ((string)settingNameValue);
                                                                additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                            }
                                                            
                                                            JToken contentValue = additionalUnattendContentValue["content"];
                                                            if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                            {
                                                                string contentInstance = ((string)contentValue);
                                                                additionalUnattendContentInstance.Content = contentInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken winRMValue = windowsConfigurationValue["winRM"];
                                                    if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                                    {
                                                        WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                        windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                        
                                                        JToken listenersArray = winRMValue["listeners"];
                                                        if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken listenersValue in ((JArray)listenersArray))
                                                            {
                                                                WinRMListener winRMListenerInstance = new WinRMListener();
                                                                winRMInstance.Listeners.Add(winRMListenerInstance);
                                                                
                                                                JToken protocolValue = listenersValue["protocol"];
                                                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                                {
                                                                    string protocolInstance = ((string)protocolValue);
                                                                    winRMListenerInstance.Protocol = protocolInstance;
                                                                }
                                                                
                                                                JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                                if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                                {
                                                                    Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                                    winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                                if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                                {
                                                    LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                                    osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                                    
                                                    JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                                    if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                                    {
                                                        bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                        linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                                    }
                                                    
                                                    JToken sshValue = linuxConfigurationValue["ssh"];
                                                    if (sshValue != null && sshValue.Type != JTokenType.Null)
                                                    {
                                                        SshConfiguration sshInstance = new SshConfiguration();
                                                        linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                        
                                                        JToken publicKeysArray = sshValue["publicKeys"];
                                                        if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                            {
                                                                SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                                sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                                
                                                                JToken pathValue = publicKeysValue["path"];
                                                                if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                                {
                                                                    string pathInstance = ((string)pathValue);
                                                                    sshPublicKeyInstance.Path = pathInstance;
                                                                }
                                                                
                                                                JToken keyDataValue = publicKeysValue["keyData"];
                                                                if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                                {
                                                                    string keyDataInstance = ((string)keyDataValue);
                                                                    sshPublicKeyInstance.KeyData = keyDataInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken secretsArray = osProfileValue["secrets"];
                                                if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken secretsValue in ((JArray)secretsArray))
                                                    {
                                                        VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                        osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                        
                                                        JToken sourceVaultValue = secretsValue["sourceVault"];
                                                        if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                        {
                                                            SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                            vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                            
                                                            JToken idValue = sourceVaultValue["id"];
                                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                                            {
                                                                string idInstance = ((string)idValue);
                                                                sourceVaultInstance.ReferenceUri = idInstance;
                                                            }
                                                        }
                                                        
                                                        JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                        if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                            {
                                                                VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                                vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                                
                                                                JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                                if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                                {
                                                                    string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                                    vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                                }
                                                                
                                                                JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                                if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                                {
                                                                    string certificateStoreInstance = ((string)certificateStoreValue);
                                                                    vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken storageProfileValue = virtualMachineProfileValue["storageProfile"];
                                            if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetStorageProfile storageProfileInstance = new VirtualMachineScaleSetStorageProfile();
                                                virtualMachineProfileInstance.StorageProfile = storageProfileInstance;
                                                
                                                JToken imageReferenceValue = storageProfileValue["imageReference"];
                                                if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                                {
                                                    ImageReference imageReferenceInstance = new ImageReference();
                                                    storageProfileInstance.ImageReference = imageReferenceInstance;
                                                    
                                                    JToken publisherValue = imageReferenceValue["publisher"];
                                                    if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                                    {
                                                        string publisherInstance = ((string)publisherValue);
                                                        imageReferenceInstance.Publisher = publisherInstance;
                                                    }
                                                    
                                                    JToken offerValue = imageReferenceValue["offer"];
                                                    if (offerValue != null && offerValue.Type != JTokenType.Null)
                                                    {
                                                        string offerInstance = ((string)offerValue);
                                                        imageReferenceInstance.Offer = offerInstance;
                                                    }
                                                    
                                                    JToken skuValue2 = imageReferenceValue["sku"];
                                                    if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                                                    {
                                                        string skuInstance2 = ((string)skuValue2);
                                                        imageReferenceInstance.Sku = skuInstance2;
                                                    }
                                                    
                                                    JToken versionValue = imageReferenceValue["version"];
                                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                    {
                                                        string versionInstance = ((string)versionValue);
                                                        imageReferenceInstance.Version = versionInstance;
                                                    }
                                                }
                                                
                                                JToken osDiskValue = storageProfileValue["osDisk"];
                                                if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                                {
                                                    VirtualMachineScaleSetOSDisk osDiskInstance = new VirtualMachineScaleSetOSDisk();
                                                    storageProfileInstance.OSDisk = osDiskInstance;
                                                    
                                                    JToken nameValue2 = osDiskValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        osDiskInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken cachingValue = osDiskValue["caching"];
                                                    if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                                    {
                                                        string cachingInstance = ((string)cachingValue);
                                                        osDiskInstance.Caching = cachingInstance;
                                                    }
                                                    
                                                    JToken createOptionValue = osDiskValue["createOption"];
                                                    if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                                    {
                                                        string createOptionInstance = ((string)createOptionValue);
                                                        osDiskInstance.CreateOption = createOptionInstance;
                                                    }
                                                    
                                                    JToken osTypeValue = osDiskValue["osType"];
                                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string osTypeInstance = ((string)osTypeValue);
                                                        osDiskInstance.OperatingSystemType = osTypeInstance;
                                                    }
                                                    
                                                    JToken imageValue = osDiskValue["image"];
                                                    if (imageValue != null && imageValue.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                        osDiskInstance.SourceImage = imageInstance;
                                                        
                                                        JToken uriValue = imageValue["uri"];
                                                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance = ((string)uriValue);
                                                            imageInstance.Uri = uriInstance;
                                                        }
                                                    }
                                                    
                                                    JToken vhdContainersArray = osDiskValue["vhdContainers"];
                                                    if (vhdContainersArray != null && vhdContainersArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken vhdContainersValue in ((JArray)vhdContainersArray))
                                                        {
                                                            osDiskInstance.VirtualHardDiskContainers.Add(((string)vhdContainersValue));
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken networkProfileValue = virtualMachineProfileValue["networkProfile"];
                                            if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetNetworkProfile networkProfileInstance = new VirtualMachineScaleSetNetworkProfile();
                                                virtualMachineProfileInstance.NetworkProfile = networkProfileInstance;
                                                
                                                JToken networkInterfaceConfigurationsArray = networkProfileValue["networkInterfaceConfigurations"];
                                                if (networkInterfaceConfigurationsArray != null && networkInterfaceConfigurationsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken networkInterfaceConfigurationsValue in ((JArray)networkInterfaceConfigurationsArray))
                                                    {
                                                        VirtualMachineScaleSetNetworkConfiguration virtualMachineScaleSetNetworkConfigurationJsonInstance = new VirtualMachineScaleSetNetworkConfiguration();
                                                        networkProfileInstance.NetworkInterfaceConfigurations.Add(virtualMachineScaleSetNetworkConfigurationJsonInstance);
                                                        
                                                        JToken nameValue3 = networkInterfaceConfigurationsValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            virtualMachineScaleSetNetworkConfigurationJsonInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        JToken propertiesValue2 = networkInterfaceConfigurationsValue["properties"];
                                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                        {
                                                            JToken primaryValue = propertiesValue2["primary"];
                                                            if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                            {
                                                                bool primaryInstance = ((bool)primaryValue);
                                                                virtualMachineScaleSetNetworkConfigurationJsonInstance.Primary = primaryInstance;
                                                            }
                                                            
                                                            JToken ipConfigurationsArray = propertiesValue2["ipConfigurations"];
                                                            if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                                                {
                                                                    VirtualMachineScaleSetIPConfiguration virtualMachineScaleSetIPConfigurationJsonInstance = new VirtualMachineScaleSetIPConfiguration();
                                                                    virtualMachineScaleSetNetworkConfigurationJsonInstance.IPConfigurations.Add(virtualMachineScaleSetIPConfigurationJsonInstance);
                                                                    
                                                                    JToken nameValue4 = ipConfigurationsValue["name"];
                                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                                    {
                                                                        string nameInstance4 = ((string)nameValue4);
                                                                        virtualMachineScaleSetIPConfigurationJsonInstance.Name = nameInstance4;
                                                                    }
                                                                    
                                                                    JToken propertiesValue3 = ipConfigurationsValue["properties"];
                                                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                                    {
                                                                        JToken subnetValue = propertiesValue3["subnet"];
                                                                        if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                                        {
                                                                            ApiEntityReference subnetInstance = new ApiEntityReference();
                                                                            virtualMachineScaleSetIPConfigurationJsonInstance.Subnet = subnetInstance;
                                                                            
                                                                            JToken idValue2 = subnetValue["id"];
                                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                                            {
                                                                                string idInstance2 = ((string)idValue2);
                                                                                subnetInstance.ReferenceUri = idInstance2;
                                                                            }
                                                                        }
                                                                        
                                                                        JToken loadBalancerBackendAddressPoolsArray = propertiesValue3["loadBalancerBackendAddressPools"];
                                                                        if (loadBalancerBackendAddressPoolsArray != null && loadBalancerBackendAddressPoolsArray.Type != JTokenType.Null)
                                                                        {
                                                                            foreach (JToken loadBalancerBackendAddressPoolsValue in ((JArray)loadBalancerBackendAddressPoolsArray))
                                                                            {
                                                                                IPConfigurationLoadBalancerAddressPool iPConfigurationLoadBalancerAddressPoolJsonInstance = new IPConfigurationLoadBalancerAddressPool();
                                                                                virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerBackendAddressPools.Add(iPConfigurationLoadBalancerAddressPoolJsonInstance);
                                                                                
                                                                                JToken idValue3 = loadBalancerBackendAddressPoolsValue["id"];
                                                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                                                {
                                                                                    string idInstance3 = ((string)idValue3);
                                                                                    iPConfigurationLoadBalancerAddressPoolJsonInstance.ReferenceUri = idInstance3;
                                                                                }
                                                                            }
                                                                        }
                                                                        
                                                                        JToken loadBalancerBackendAddressPoolsArray2 = propertiesValue3["loadBalancerBackendAddressPools"];
                                                                        if (loadBalancerBackendAddressPoolsArray2 != null && loadBalancerBackendAddressPoolsArray2.Type != JTokenType.Null)
                                                                        {
                                                                            foreach (JToken loadBalancerBackendAddressPoolsValue2 in ((JArray)loadBalancerBackendAddressPoolsArray2))
                                                                            {
                                                                                IPConfigurationLoadBalancerInboundNATPool iPConfigurationLoadBalancerInboundNATPoolJsonInstance = new IPConfigurationLoadBalancerInboundNATPool();
                                                                                virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerInboundNatPools.Add(iPConfigurationLoadBalancerInboundNATPoolJsonInstance);
                                                                                
                                                                                JToken idValue4 = loadBalancerBackendAddressPoolsValue2["id"];
                                                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                                                {
                                                                                    string idInstance4 = ((string)idValue4);
                                                                                    iPConfigurationLoadBalancerInboundNATPoolJsonInstance.ReferenceUri = idInstance4;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken extensionProfileValue = virtualMachineProfileValue["extensionProfile"];
                                            if (extensionProfileValue != null && extensionProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetExtensionProfile extensionProfileInstance = new VirtualMachineScaleSetExtensionProfile();
                                                virtualMachineProfileInstance.ExtensionProfile = extensionProfileInstance;
                                                
                                                JToken extensionsArray = extensionProfileValue["extensions"];
                                                if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                                {
                                                    extensionProfileInstance.Extensions = new List<VirtualMachineScaleSetExtension>();
                                                    foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                                    {
                                                        VirtualMachineScaleSetExtension virtualMachineScaleSetExtensionJsonInstance = new VirtualMachineScaleSetExtension();
                                                        extensionProfileInstance.Extensions.Add(virtualMachineScaleSetExtensionJsonInstance);
                                                        
                                                        JToken propertiesValue4 = extensionsValue["properties"];
                                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                        {
                                                            JToken publisherValue2 = propertiesValue4["publisher"];
                                                            if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                            {
                                                                string publisherInstance2 = ((string)publisherValue2);
                                                                virtualMachineScaleSetExtensionJsonInstance.Publisher = publisherInstance2;
                                                            }
                                                            
                                                            JToken typeValue = propertiesValue4["type"];
                                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                            {
                                                                string typeInstance = ((string)typeValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.ExtensionType = typeInstance;
                                                            }
                                                            
                                                            JToken typeHandlerVersionValue = propertiesValue4["typeHandlerVersion"];
                                                            if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                            {
                                                                string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                            }
                                                            
                                                            JToken autoUpgradeMinorVersionValue = propertiesValue4["autoUpgradeMinorVersion"];
                                                            if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                            {
                                                                bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                            }
                                                            
                                                            JToken settingsValue = propertiesValue4["settings"];
                                                            if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                            {
                                                                string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                                virtualMachineScaleSetExtensionJsonInstance.Settings = settingsInstance;
                                                            }
                                                            
                                                            JToken protectedSettingsValue = propertiesValue4["protectedSettings"];
                                                            if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                            {
                                                                string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                                virtualMachineScaleSetExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                            }
                                                            
                                                            JToken provisioningStateValue = propertiesValue4["provisioningState"];
                                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                            {
                                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.ProvisioningState = provisioningStateInstance;
                                                            }
                                                        }
                                                        
                                                        JToken idValue5 = extensionsValue["id"];
                                                        if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                        {
                                                            string idInstance5 = ((string)idValue5);
                                                            virtualMachineScaleSetExtensionJsonInstance.Id = idInstance5;
                                                        }
                                                        
                                                        JToken nameValue5 = extensionsValue["name"];
                                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance5 = ((string)nameValue5);
                                                            virtualMachineScaleSetExtensionJsonInstance.Name = nameInstance5;
                                                        }
                                                        
                                                        JToken typeValue2 = extensionsValue["type"];
                                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance2 = ((string)typeValue2);
                                                            virtualMachineScaleSetExtensionJsonInstance.Type = typeInstance2;
                                                        }
                                                        
                                                        JToken locationValue = extensionsValue["location"];
                                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                        {
                                                            string locationInstance = ((string)locationValue);
                                                            virtualMachineScaleSetExtensionJsonInstance.Location = locationInstance;
                                                        }
                                                        
                                                        JToken tagsSequenceElement = ((JToken)extensionsValue["tags"]);
                                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property in tagsSequenceElement)
                                                            {
                                                                string tagsKey = ((string)property.Name);
                                                                string tagsValue = ((string)property.Value);
                                                                virtualMachineScaleSetExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualMachineScaleSetJsonInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                    }
                                    
                                    JToken idValue6 = valueValue["id"];
                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                    {
                                        string idInstance6 = ((string)idValue6);
                                        virtualMachineScaleSetJsonInstance.Id = idInstance6;
                                    }
                                    
                                    JToken nameValue6 = valueValue["name"];
                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                    {
                                        string nameInstance6 = ((string)nameValue6);
                                        virtualMachineScaleSetJsonInstance.Name = nameInstance6;
                                    }
                                    
                                    JToken typeValue3 = valueValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        virtualMachineScaleSetJsonInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualMachineScaleSetJsonInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualMachineScaleSetJsonInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of Virtual Machine Scale Sets in the subscription.
        /// Use nextLink property in the response to get the next page of
        /// Virtual Machine Scale Sets. Do this till nextLink is not null to
        /// fetch all the Virtual Machine Scale Sets.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetListWithLinkResponse> ListAllAsync(ListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetListWithLinkResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetListWithLinkResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineScaleSet virtualMachineScaleSetJsonInstance = new VirtualMachineScaleSet();
                                    result.VirtualMachineScaleSets.Add(virtualMachineScaleSetJsonInstance);
                                    
                                    JToken skuValue = valueValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        Sku skuInstance = new Sku();
                                        virtualMachineScaleSetJsonInstance.Sku = skuInstance;
                                        
                                        JToken nameValue = skuValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            skuInstance.Name = nameInstance;
                                        }
                                        
                                        JToken tierValue = skuValue["tier"];
                                        if (tierValue != null && tierValue.Type != JTokenType.Null)
                                        {
                                            string tierInstance = ((string)tierValue);
                                            skuInstance.Tier = tierInstance;
                                        }
                                        
                                        JToken capacityValue = skuValue["capacity"];
                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                        {
                                            uint capacityInstance = ((uint)capacityValue);
                                            skuInstance.Capacity = capacityInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken upgradePolicyValue = propertiesValue["upgradePolicy"];
                                        if (upgradePolicyValue != null && upgradePolicyValue.Type != JTokenType.Null)
                                        {
                                            UpgradePolicy upgradePolicyInstance = new UpgradePolicy();
                                            virtualMachineScaleSetJsonInstance.UpgradePolicy = upgradePolicyInstance;
                                            
                                            JToken modeValue = upgradePolicyValue["mode"];
                                            if (modeValue != null && modeValue.Type != JTokenType.Null)
                                            {
                                                string modeInstance = ((string)modeValue);
                                                upgradePolicyInstance.Mode = modeInstance;
                                            }
                                        }
                                        
                                        JToken virtualMachineProfileValue = propertiesValue["virtualMachineProfile"];
                                        if (virtualMachineProfileValue != null && virtualMachineProfileValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineScaleSetVMProfile virtualMachineProfileInstance = new VirtualMachineScaleSetVMProfile();
                                            virtualMachineScaleSetJsonInstance.VirtualMachineProfile = virtualMachineProfileInstance;
                                            
                                            JToken osProfileValue = virtualMachineProfileValue["osProfile"];
                                            if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetOSProfile osProfileInstance = new VirtualMachineScaleSetOSProfile();
                                                virtualMachineProfileInstance.OSProfile = osProfileInstance;
                                                
                                                JToken computerNamePrefixValue = osProfileValue["computerNamePrefix"];
                                                if (computerNamePrefixValue != null && computerNamePrefixValue.Type != JTokenType.Null)
                                                {
                                                    string computerNamePrefixInstance = ((string)computerNamePrefixValue);
                                                    osProfileInstance.ComputerNamePrefix = computerNamePrefixInstance;
                                                }
                                                
                                                JToken adminUsernameValue = osProfileValue["adminUsername"];
                                                if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                                {
                                                    string adminUsernameInstance = ((string)adminUsernameValue);
                                                    osProfileInstance.AdminUsername = adminUsernameInstance;
                                                }
                                                
                                                JToken adminPasswordValue = osProfileValue["adminPassword"];
                                                if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                                {
                                                    string adminPasswordInstance = ((string)adminPasswordValue);
                                                    osProfileInstance.AdminPassword = adminPasswordInstance;
                                                }
                                                
                                                JToken customDataValue = osProfileValue["customData"];
                                                if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                                {
                                                    string customDataInstance = ((string)customDataValue);
                                                    osProfileInstance.CustomData = customDataInstance;
                                                }
                                                
                                                JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                                if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                                {
                                                    WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                                    osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                                    
                                                    JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                                    if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                                    {
                                                        bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                        windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                                    }
                                                    
                                                    JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                                    if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                                    {
                                                        bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                        windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                    }
                                                    
                                                    JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                                    if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                    {
                                                        string timeZoneInstance = ((string)timeZoneValue);
                                                        windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                                    }
                                                    
                                                    JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                                    if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                        {
                                                            AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                            windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                            
                                                            JToken passNameValue = additionalUnattendContentValue["passName"];
                                                            if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                            {
                                                                string passNameInstance = ((string)passNameValue);
                                                                additionalUnattendContentInstance.PassName = passNameInstance;
                                                            }
                                                            
                                                            JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                            if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                            {
                                                                string componentNameInstance = ((string)componentNameValue);
                                                                additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                            }
                                                            
                                                            JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                            if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                            {
                                                                string settingNameInstance = ((string)settingNameValue);
                                                                additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                            }
                                                            
                                                            JToken contentValue = additionalUnattendContentValue["content"];
                                                            if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                            {
                                                                string contentInstance = ((string)contentValue);
                                                                additionalUnattendContentInstance.Content = contentInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken winRMValue = windowsConfigurationValue["winRM"];
                                                    if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                                    {
                                                        WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                        windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                        
                                                        JToken listenersArray = winRMValue["listeners"];
                                                        if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken listenersValue in ((JArray)listenersArray))
                                                            {
                                                                WinRMListener winRMListenerInstance = new WinRMListener();
                                                                winRMInstance.Listeners.Add(winRMListenerInstance);
                                                                
                                                                JToken protocolValue = listenersValue["protocol"];
                                                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                                {
                                                                    string protocolInstance = ((string)protocolValue);
                                                                    winRMListenerInstance.Protocol = protocolInstance;
                                                                }
                                                                
                                                                JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                                if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                                {
                                                                    Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                                    winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                                if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                                {
                                                    LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                                    osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                                    
                                                    JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                                    if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                                    {
                                                        bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                        linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                                    }
                                                    
                                                    JToken sshValue = linuxConfigurationValue["ssh"];
                                                    if (sshValue != null && sshValue.Type != JTokenType.Null)
                                                    {
                                                        SshConfiguration sshInstance = new SshConfiguration();
                                                        linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                        
                                                        JToken publicKeysArray = sshValue["publicKeys"];
                                                        if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                            {
                                                                SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                                sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                                
                                                                JToken pathValue = publicKeysValue["path"];
                                                                if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                                {
                                                                    string pathInstance = ((string)pathValue);
                                                                    sshPublicKeyInstance.Path = pathInstance;
                                                                }
                                                                
                                                                JToken keyDataValue = publicKeysValue["keyData"];
                                                                if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                                {
                                                                    string keyDataInstance = ((string)keyDataValue);
                                                                    sshPublicKeyInstance.KeyData = keyDataInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken secretsArray = osProfileValue["secrets"];
                                                if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken secretsValue in ((JArray)secretsArray))
                                                    {
                                                        VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                        osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                        
                                                        JToken sourceVaultValue = secretsValue["sourceVault"];
                                                        if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                        {
                                                            SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                            vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                            
                                                            JToken idValue = sourceVaultValue["id"];
                                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                                            {
                                                                string idInstance = ((string)idValue);
                                                                sourceVaultInstance.ReferenceUri = idInstance;
                                                            }
                                                        }
                                                        
                                                        JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                        if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                            {
                                                                VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                                vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                                
                                                                JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                                if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                                {
                                                                    string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                                    vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                                }
                                                                
                                                                JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                                if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                                {
                                                                    string certificateStoreInstance = ((string)certificateStoreValue);
                                                                    vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken storageProfileValue = virtualMachineProfileValue["storageProfile"];
                                            if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetStorageProfile storageProfileInstance = new VirtualMachineScaleSetStorageProfile();
                                                virtualMachineProfileInstance.StorageProfile = storageProfileInstance;
                                                
                                                JToken imageReferenceValue = storageProfileValue["imageReference"];
                                                if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                                {
                                                    ImageReference imageReferenceInstance = new ImageReference();
                                                    storageProfileInstance.ImageReference = imageReferenceInstance;
                                                    
                                                    JToken publisherValue = imageReferenceValue["publisher"];
                                                    if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                                    {
                                                        string publisherInstance = ((string)publisherValue);
                                                        imageReferenceInstance.Publisher = publisherInstance;
                                                    }
                                                    
                                                    JToken offerValue = imageReferenceValue["offer"];
                                                    if (offerValue != null && offerValue.Type != JTokenType.Null)
                                                    {
                                                        string offerInstance = ((string)offerValue);
                                                        imageReferenceInstance.Offer = offerInstance;
                                                    }
                                                    
                                                    JToken skuValue2 = imageReferenceValue["sku"];
                                                    if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                                                    {
                                                        string skuInstance2 = ((string)skuValue2);
                                                        imageReferenceInstance.Sku = skuInstance2;
                                                    }
                                                    
                                                    JToken versionValue = imageReferenceValue["version"];
                                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                    {
                                                        string versionInstance = ((string)versionValue);
                                                        imageReferenceInstance.Version = versionInstance;
                                                    }
                                                }
                                                
                                                JToken osDiskValue = storageProfileValue["osDisk"];
                                                if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                                {
                                                    VirtualMachineScaleSetOSDisk osDiskInstance = new VirtualMachineScaleSetOSDisk();
                                                    storageProfileInstance.OSDisk = osDiskInstance;
                                                    
                                                    JToken nameValue2 = osDiskValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        osDiskInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken cachingValue = osDiskValue["caching"];
                                                    if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                                    {
                                                        string cachingInstance = ((string)cachingValue);
                                                        osDiskInstance.Caching = cachingInstance;
                                                    }
                                                    
                                                    JToken createOptionValue = osDiskValue["createOption"];
                                                    if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                                    {
                                                        string createOptionInstance = ((string)createOptionValue);
                                                        osDiskInstance.CreateOption = createOptionInstance;
                                                    }
                                                    
                                                    JToken osTypeValue = osDiskValue["osType"];
                                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string osTypeInstance = ((string)osTypeValue);
                                                        osDiskInstance.OperatingSystemType = osTypeInstance;
                                                    }
                                                    
                                                    JToken imageValue = osDiskValue["image"];
                                                    if (imageValue != null && imageValue.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                        osDiskInstance.SourceImage = imageInstance;
                                                        
                                                        JToken uriValue = imageValue["uri"];
                                                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance = ((string)uriValue);
                                                            imageInstance.Uri = uriInstance;
                                                        }
                                                    }
                                                    
                                                    JToken vhdContainersArray = osDiskValue["vhdContainers"];
                                                    if (vhdContainersArray != null && vhdContainersArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken vhdContainersValue in ((JArray)vhdContainersArray))
                                                        {
                                                            osDiskInstance.VirtualHardDiskContainers.Add(((string)vhdContainersValue));
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken networkProfileValue = virtualMachineProfileValue["networkProfile"];
                                            if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetNetworkProfile networkProfileInstance = new VirtualMachineScaleSetNetworkProfile();
                                                virtualMachineProfileInstance.NetworkProfile = networkProfileInstance;
                                                
                                                JToken networkInterfaceConfigurationsArray = networkProfileValue["networkInterfaceConfigurations"];
                                                if (networkInterfaceConfigurationsArray != null && networkInterfaceConfigurationsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken networkInterfaceConfigurationsValue in ((JArray)networkInterfaceConfigurationsArray))
                                                    {
                                                        VirtualMachineScaleSetNetworkConfiguration virtualMachineScaleSetNetworkConfigurationJsonInstance = new VirtualMachineScaleSetNetworkConfiguration();
                                                        networkProfileInstance.NetworkInterfaceConfigurations.Add(virtualMachineScaleSetNetworkConfigurationJsonInstance);
                                                        
                                                        JToken nameValue3 = networkInterfaceConfigurationsValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            virtualMachineScaleSetNetworkConfigurationJsonInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        JToken propertiesValue2 = networkInterfaceConfigurationsValue["properties"];
                                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                        {
                                                            JToken primaryValue = propertiesValue2["primary"];
                                                            if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                            {
                                                                bool primaryInstance = ((bool)primaryValue);
                                                                virtualMachineScaleSetNetworkConfigurationJsonInstance.Primary = primaryInstance;
                                                            }
                                                            
                                                            JToken ipConfigurationsArray = propertiesValue2["ipConfigurations"];
                                                            if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                                                {
                                                                    VirtualMachineScaleSetIPConfiguration virtualMachineScaleSetIPConfigurationJsonInstance = new VirtualMachineScaleSetIPConfiguration();
                                                                    virtualMachineScaleSetNetworkConfigurationJsonInstance.IPConfigurations.Add(virtualMachineScaleSetIPConfigurationJsonInstance);
                                                                    
                                                                    JToken nameValue4 = ipConfigurationsValue["name"];
                                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                                    {
                                                                        string nameInstance4 = ((string)nameValue4);
                                                                        virtualMachineScaleSetIPConfigurationJsonInstance.Name = nameInstance4;
                                                                    }
                                                                    
                                                                    JToken propertiesValue3 = ipConfigurationsValue["properties"];
                                                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                                    {
                                                                        JToken subnetValue = propertiesValue3["subnet"];
                                                                        if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                                        {
                                                                            ApiEntityReference subnetInstance = new ApiEntityReference();
                                                                            virtualMachineScaleSetIPConfigurationJsonInstance.Subnet = subnetInstance;
                                                                            
                                                                            JToken idValue2 = subnetValue["id"];
                                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                                            {
                                                                                string idInstance2 = ((string)idValue2);
                                                                                subnetInstance.ReferenceUri = idInstance2;
                                                                            }
                                                                        }
                                                                        
                                                                        JToken loadBalancerBackendAddressPoolsArray = propertiesValue3["loadBalancerBackendAddressPools"];
                                                                        if (loadBalancerBackendAddressPoolsArray != null && loadBalancerBackendAddressPoolsArray.Type != JTokenType.Null)
                                                                        {
                                                                            foreach (JToken loadBalancerBackendAddressPoolsValue in ((JArray)loadBalancerBackendAddressPoolsArray))
                                                                            {
                                                                                IPConfigurationLoadBalancerAddressPool iPConfigurationLoadBalancerAddressPoolJsonInstance = new IPConfigurationLoadBalancerAddressPool();
                                                                                virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerBackendAddressPools.Add(iPConfigurationLoadBalancerAddressPoolJsonInstance);
                                                                                
                                                                                JToken idValue3 = loadBalancerBackendAddressPoolsValue["id"];
                                                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                                                {
                                                                                    string idInstance3 = ((string)idValue3);
                                                                                    iPConfigurationLoadBalancerAddressPoolJsonInstance.ReferenceUri = idInstance3;
                                                                                }
                                                                            }
                                                                        }
                                                                        
                                                                        JToken loadBalancerBackendAddressPoolsArray2 = propertiesValue3["loadBalancerBackendAddressPools"];
                                                                        if (loadBalancerBackendAddressPoolsArray2 != null && loadBalancerBackendAddressPoolsArray2.Type != JTokenType.Null)
                                                                        {
                                                                            foreach (JToken loadBalancerBackendAddressPoolsValue2 in ((JArray)loadBalancerBackendAddressPoolsArray2))
                                                                            {
                                                                                IPConfigurationLoadBalancerInboundNATPool iPConfigurationLoadBalancerInboundNATPoolJsonInstance = new IPConfigurationLoadBalancerInboundNATPool();
                                                                                virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerInboundNatPools.Add(iPConfigurationLoadBalancerInboundNATPoolJsonInstance);
                                                                                
                                                                                JToken idValue4 = loadBalancerBackendAddressPoolsValue2["id"];
                                                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                                                {
                                                                                    string idInstance4 = ((string)idValue4);
                                                                                    iPConfigurationLoadBalancerInboundNATPoolJsonInstance.ReferenceUri = idInstance4;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken extensionProfileValue = virtualMachineProfileValue["extensionProfile"];
                                            if (extensionProfileValue != null && extensionProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetExtensionProfile extensionProfileInstance = new VirtualMachineScaleSetExtensionProfile();
                                                virtualMachineProfileInstance.ExtensionProfile = extensionProfileInstance;
                                                
                                                JToken extensionsArray = extensionProfileValue["extensions"];
                                                if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                                {
                                                    extensionProfileInstance.Extensions = new List<VirtualMachineScaleSetExtension>();
                                                    foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                                    {
                                                        VirtualMachineScaleSetExtension virtualMachineScaleSetExtensionJsonInstance = new VirtualMachineScaleSetExtension();
                                                        extensionProfileInstance.Extensions.Add(virtualMachineScaleSetExtensionJsonInstance);
                                                        
                                                        JToken propertiesValue4 = extensionsValue["properties"];
                                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                        {
                                                            JToken publisherValue2 = propertiesValue4["publisher"];
                                                            if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                            {
                                                                string publisherInstance2 = ((string)publisherValue2);
                                                                virtualMachineScaleSetExtensionJsonInstance.Publisher = publisherInstance2;
                                                            }
                                                            
                                                            JToken typeValue = propertiesValue4["type"];
                                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                            {
                                                                string typeInstance = ((string)typeValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.ExtensionType = typeInstance;
                                                            }
                                                            
                                                            JToken typeHandlerVersionValue = propertiesValue4["typeHandlerVersion"];
                                                            if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                            {
                                                                string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                            }
                                                            
                                                            JToken autoUpgradeMinorVersionValue = propertiesValue4["autoUpgradeMinorVersion"];
                                                            if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                            {
                                                                bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                            }
                                                            
                                                            JToken settingsValue = propertiesValue4["settings"];
                                                            if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                            {
                                                                string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                                virtualMachineScaleSetExtensionJsonInstance.Settings = settingsInstance;
                                                            }
                                                            
                                                            JToken protectedSettingsValue = propertiesValue4["protectedSettings"];
                                                            if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                            {
                                                                string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                                virtualMachineScaleSetExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                            }
                                                            
                                                            JToken provisioningStateValue = propertiesValue4["provisioningState"];
                                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                            {
                                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.ProvisioningState = provisioningStateInstance;
                                                            }
                                                        }
                                                        
                                                        JToken idValue5 = extensionsValue["id"];
                                                        if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                        {
                                                            string idInstance5 = ((string)idValue5);
                                                            virtualMachineScaleSetExtensionJsonInstance.Id = idInstance5;
                                                        }
                                                        
                                                        JToken nameValue5 = extensionsValue["name"];
                                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance5 = ((string)nameValue5);
                                                            virtualMachineScaleSetExtensionJsonInstance.Name = nameInstance5;
                                                        }
                                                        
                                                        JToken typeValue2 = extensionsValue["type"];
                                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance2 = ((string)typeValue2);
                                                            virtualMachineScaleSetExtensionJsonInstance.Type = typeInstance2;
                                                        }
                                                        
                                                        JToken locationValue = extensionsValue["location"];
                                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                        {
                                                            string locationInstance = ((string)locationValue);
                                                            virtualMachineScaleSetExtensionJsonInstance.Location = locationInstance;
                                                        }
                                                        
                                                        JToken tagsSequenceElement = ((JToken)extensionsValue["tags"]);
                                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property in tagsSequenceElement)
                                                            {
                                                                string tagsKey = ((string)property.Name);
                                                                string tagsValue = ((string)property.Value);
                                                                virtualMachineScaleSetExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualMachineScaleSetJsonInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                    }
                                    
                                    JToken idValue6 = valueValue["id"];
                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                    {
                                        string idInstance6 = ((string)idValue6);
                                        virtualMachineScaleSetJsonInstance.Id = idInstance6;
                                    }
                                    
                                    JToken nameValue6 = valueValue["name"];
                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                    {
                                        string nameInstance6 = ((string)nameValue6);
                                        virtualMachineScaleSetJsonInstance.Name = nameInstance6;
                                    }
                                    
                                    JToken typeValue3 = valueValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        virtualMachineScaleSetJsonInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualMachineScaleSetJsonInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualMachineScaleSetJsonInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of Virtual Machine Scale Sets. NextLink is
        /// obtained by making a ListAll() callwhich fetches the first page of
        /// Virtual Machine Scale Sets and a link to fetch the next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// ListVirtualMachineScaleSets operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetListWithLinkResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetListWithLinkResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetListWithLinkResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineScaleSet virtualMachineScaleSetJsonInstance = new VirtualMachineScaleSet();
                                    result.VirtualMachineScaleSets.Add(virtualMachineScaleSetJsonInstance);
                                    
                                    JToken skuValue = valueValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        Sku skuInstance = new Sku();
                                        virtualMachineScaleSetJsonInstance.Sku = skuInstance;
                                        
                                        JToken nameValue = skuValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            skuInstance.Name = nameInstance;
                                        }
                                        
                                        JToken tierValue = skuValue["tier"];
                                        if (tierValue != null && tierValue.Type != JTokenType.Null)
                                        {
                                            string tierInstance = ((string)tierValue);
                                            skuInstance.Tier = tierInstance;
                                        }
                                        
                                        JToken capacityValue = skuValue["capacity"];
                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                        {
                                            uint capacityInstance = ((uint)capacityValue);
                                            skuInstance.Capacity = capacityInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken upgradePolicyValue = propertiesValue["upgradePolicy"];
                                        if (upgradePolicyValue != null && upgradePolicyValue.Type != JTokenType.Null)
                                        {
                                            UpgradePolicy upgradePolicyInstance = new UpgradePolicy();
                                            virtualMachineScaleSetJsonInstance.UpgradePolicy = upgradePolicyInstance;
                                            
                                            JToken modeValue = upgradePolicyValue["mode"];
                                            if (modeValue != null && modeValue.Type != JTokenType.Null)
                                            {
                                                string modeInstance = ((string)modeValue);
                                                upgradePolicyInstance.Mode = modeInstance;
                                            }
                                        }
                                        
                                        JToken virtualMachineProfileValue = propertiesValue["virtualMachineProfile"];
                                        if (virtualMachineProfileValue != null && virtualMachineProfileValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineScaleSetVMProfile virtualMachineProfileInstance = new VirtualMachineScaleSetVMProfile();
                                            virtualMachineScaleSetJsonInstance.VirtualMachineProfile = virtualMachineProfileInstance;
                                            
                                            JToken osProfileValue = virtualMachineProfileValue["osProfile"];
                                            if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetOSProfile osProfileInstance = new VirtualMachineScaleSetOSProfile();
                                                virtualMachineProfileInstance.OSProfile = osProfileInstance;
                                                
                                                JToken computerNamePrefixValue = osProfileValue["computerNamePrefix"];
                                                if (computerNamePrefixValue != null && computerNamePrefixValue.Type != JTokenType.Null)
                                                {
                                                    string computerNamePrefixInstance = ((string)computerNamePrefixValue);
                                                    osProfileInstance.ComputerNamePrefix = computerNamePrefixInstance;
                                                }
                                                
                                                JToken adminUsernameValue = osProfileValue["adminUsername"];
                                                if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                                {
                                                    string adminUsernameInstance = ((string)adminUsernameValue);
                                                    osProfileInstance.AdminUsername = adminUsernameInstance;
                                                }
                                                
                                                JToken adminPasswordValue = osProfileValue["adminPassword"];
                                                if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                                {
                                                    string adminPasswordInstance = ((string)adminPasswordValue);
                                                    osProfileInstance.AdminPassword = adminPasswordInstance;
                                                }
                                                
                                                JToken customDataValue = osProfileValue["customData"];
                                                if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                                {
                                                    string customDataInstance = ((string)customDataValue);
                                                    osProfileInstance.CustomData = customDataInstance;
                                                }
                                                
                                                JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                                if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                                {
                                                    WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                                    osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                                    
                                                    JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                                    if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                                    {
                                                        bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                        windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                                    }
                                                    
                                                    JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                                    if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                                    {
                                                        bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                        windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                    }
                                                    
                                                    JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                                    if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                    {
                                                        string timeZoneInstance = ((string)timeZoneValue);
                                                        windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                                    }
                                                    
                                                    JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                                    if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                        {
                                                            AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                            windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                            
                                                            JToken passNameValue = additionalUnattendContentValue["passName"];
                                                            if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                            {
                                                                string passNameInstance = ((string)passNameValue);
                                                                additionalUnattendContentInstance.PassName = passNameInstance;
                                                            }
                                                            
                                                            JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                            if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                            {
                                                                string componentNameInstance = ((string)componentNameValue);
                                                                additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                            }
                                                            
                                                            JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                            if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                            {
                                                                string settingNameInstance = ((string)settingNameValue);
                                                                additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                            }
                                                            
                                                            JToken contentValue = additionalUnattendContentValue["content"];
                                                            if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                            {
                                                                string contentInstance = ((string)contentValue);
                                                                additionalUnattendContentInstance.Content = contentInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken winRMValue = windowsConfigurationValue["winRM"];
                                                    if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                                    {
                                                        WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                        windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                        
                                                        JToken listenersArray = winRMValue["listeners"];
                                                        if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken listenersValue in ((JArray)listenersArray))
                                                            {
                                                                WinRMListener winRMListenerInstance = new WinRMListener();
                                                                winRMInstance.Listeners.Add(winRMListenerInstance);
                                                                
                                                                JToken protocolValue = listenersValue["protocol"];
                                                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                                {
                                                                    string protocolInstance = ((string)protocolValue);
                                                                    winRMListenerInstance.Protocol = protocolInstance;
                                                                }
                                                                
                                                                JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                                if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                                {
                                                                    Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                                    winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                                if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                                {
                                                    LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                                    osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                                    
                                                    JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                                    if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                                    {
                                                        bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                        linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                                    }
                                                    
                                                    JToken sshValue = linuxConfigurationValue["ssh"];
                                                    if (sshValue != null && sshValue.Type != JTokenType.Null)
                                                    {
                                                        SshConfiguration sshInstance = new SshConfiguration();
                                                        linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                        
                                                        JToken publicKeysArray = sshValue["publicKeys"];
                                                        if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                            {
                                                                SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                                sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                                
                                                                JToken pathValue = publicKeysValue["path"];
                                                                if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                                {
                                                                    string pathInstance = ((string)pathValue);
                                                                    sshPublicKeyInstance.Path = pathInstance;
                                                                }
                                                                
                                                                JToken keyDataValue = publicKeysValue["keyData"];
                                                                if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                                {
                                                                    string keyDataInstance = ((string)keyDataValue);
                                                                    sshPublicKeyInstance.KeyData = keyDataInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken secretsArray = osProfileValue["secrets"];
                                                if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken secretsValue in ((JArray)secretsArray))
                                                    {
                                                        VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                        osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                        
                                                        JToken sourceVaultValue = secretsValue["sourceVault"];
                                                        if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                        {
                                                            SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                            vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                            
                                                            JToken idValue = sourceVaultValue["id"];
                                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                                            {
                                                                string idInstance = ((string)idValue);
                                                                sourceVaultInstance.ReferenceUri = idInstance;
                                                            }
                                                        }
                                                        
                                                        JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                        if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                            {
                                                                VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                                vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                                
                                                                JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                                if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                                {
                                                                    string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                                    vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                                }
                                                                
                                                                JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                                if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                                {
                                                                    string certificateStoreInstance = ((string)certificateStoreValue);
                                                                    vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken storageProfileValue = virtualMachineProfileValue["storageProfile"];
                                            if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetStorageProfile storageProfileInstance = new VirtualMachineScaleSetStorageProfile();
                                                virtualMachineProfileInstance.StorageProfile = storageProfileInstance;
                                                
                                                JToken imageReferenceValue = storageProfileValue["imageReference"];
                                                if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                                {
                                                    ImageReference imageReferenceInstance = new ImageReference();
                                                    storageProfileInstance.ImageReference = imageReferenceInstance;
                                                    
                                                    JToken publisherValue = imageReferenceValue["publisher"];
                                                    if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                                    {
                                                        string publisherInstance = ((string)publisherValue);
                                                        imageReferenceInstance.Publisher = publisherInstance;
                                                    }
                                                    
                                                    JToken offerValue = imageReferenceValue["offer"];
                                                    if (offerValue != null && offerValue.Type != JTokenType.Null)
                                                    {
                                                        string offerInstance = ((string)offerValue);
                                                        imageReferenceInstance.Offer = offerInstance;
                                                    }
                                                    
                                                    JToken skuValue2 = imageReferenceValue["sku"];
                                                    if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                                                    {
                                                        string skuInstance2 = ((string)skuValue2);
                                                        imageReferenceInstance.Sku = skuInstance2;
                                                    }
                                                    
                                                    JToken versionValue = imageReferenceValue["version"];
                                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                    {
                                                        string versionInstance = ((string)versionValue);
                                                        imageReferenceInstance.Version = versionInstance;
                                                    }
                                                }
                                                
                                                JToken osDiskValue = storageProfileValue["osDisk"];
                                                if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                                {
                                                    VirtualMachineScaleSetOSDisk osDiskInstance = new VirtualMachineScaleSetOSDisk();
                                                    storageProfileInstance.OSDisk = osDiskInstance;
                                                    
                                                    JToken nameValue2 = osDiskValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        osDiskInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken cachingValue = osDiskValue["caching"];
                                                    if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                                    {
                                                        string cachingInstance = ((string)cachingValue);
                                                        osDiskInstance.Caching = cachingInstance;
                                                    }
                                                    
                                                    JToken createOptionValue = osDiskValue["createOption"];
                                                    if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                                    {
                                                        string createOptionInstance = ((string)createOptionValue);
                                                        osDiskInstance.CreateOption = createOptionInstance;
                                                    }
                                                    
                                                    JToken osTypeValue = osDiskValue["osType"];
                                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string osTypeInstance = ((string)osTypeValue);
                                                        osDiskInstance.OperatingSystemType = osTypeInstance;
                                                    }
                                                    
                                                    JToken imageValue = osDiskValue["image"];
                                                    if (imageValue != null && imageValue.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                        osDiskInstance.SourceImage = imageInstance;
                                                        
                                                        JToken uriValue = imageValue["uri"];
                                                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance = ((string)uriValue);
                                                            imageInstance.Uri = uriInstance;
                                                        }
                                                    }
                                                    
                                                    JToken vhdContainersArray = osDiskValue["vhdContainers"];
                                                    if (vhdContainersArray != null && vhdContainersArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken vhdContainersValue in ((JArray)vhdContainersArray))
                                                        {
                                                            osDiskInstance.VirtualHardDiskContainers.Add(((string)vhdContainersValue));
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken networkProfileValue = virtualMachineProfileValue["networkProfile"];
                                            if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetNetworkProfile networkProfileInstance = new VirtualMachineScaleSetNetworkProfile();
                                                virtualMachineProfileInstance.NetworkProfile = networkProfileInstance;
                                                
                                                JToken networkInterfaceConfigurationsArray = networkProfileValue["networkInterfaceConfigurations"];
                                                if (networkInterfaceConfigurationsArray != null && networkInterfaceConfigurationsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken networkInterfaceConfigurationsValue in ((JArray)networkInterfaceConfigurationsArray))
                                                    {
                                                        VirtualMachineScaleSetNetworkConfiguration virtualMachineScaleSetNetworkConfigurationJsonInstance = new VirtualMachineScaleSetNetworkConfiguration();
                                                        networkProfileInstance.NetworkInterfaceConfigurations.Add(virtualMachineScaleSetNetworkConfigurationJsonInstance);
                                                        
                                                        JToken nameValue3 = networkInterfaceConfigurationsValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            virtualMachineScaleSetNetworkConfigurationJsonInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        JToken propertiesValue2 = networkInterfaceConfigurationsValue["properties"];
                                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                        {
                                                            JToken primaryValue = propertiesValue2["primary"];
                                                            if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                            {
                                                                bool primaryInstance = ((bool)primaryValue);
                                                                virtualMachineScaleSetNetworkConfigurationJsonInstance.Primary = primaryInstance;
                                                            }
                                                            
                                                            JToken ipConfigurationsArray = propertiesValue2["ipConfigurations"];
                                                            if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                                                {
                                                                    VirtualMachineScaleSetIPConfiguration virtualMachineScaleSetIPConfigurationJsonInstance = new VirtualMachineScaleSetIPConfiguration();
                                                                    virtualMachineScaleSetNetworkConfigurationJsonInstance.IPConfigurations.Add(virtualMachineScaleSetIPConfigurationJsonInstance);
                                                                    
                                                                    JToken nameValue4 = ipConfigurationsValue["name"];
                                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                                    {
                                                                        string nameInstance4 = ((string)nameValue4);
                                                                        virtualMachineScaleSetIPConfigurationJsonInstance.Name = nameInstance4;
                                                                    }
                                                                    
                                                                    JToken propertiesValue3 = ipConfigurationsValue["properties"];
                                                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                                    {
                                                                        JToken subnetValue = propertiesValue3["subnet"];
                                                                        if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                                        {
                                                                            ApiEntityReference subnetInstance = new ApiEntityReference();
                                                                            virtualMachineScaleSetIPConfigurationJsonInstance.Subnet = subnetInstance;
                                                                            
                                                                            JToken idValue2 = subnetValue["id"];
                                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                                            {
                                                                                string idInstance2 = ((string)idValue2);
                                                                                subnetInstance.ReferenceUri = idInstance2;
                                                                            }
                                                                        }
                                                                        
                                                                        JToken loadBalancerBackendAddressPoolsArray = propertiesValue3["loadBalancerBackendAddressPools"];
                                                                        if (loadBalancerBackendAddressPoolsArray != null && loadBalancerBackendAddressPoolsArray.Type != JTokenType.Null)
                                                                        {
                                                                            foreach (JToken loadBalancerBackendAddressPoolsValue in ((JArray)loadBalancerBackendAddressPoolsArray))
                                                                            {
                                                                                IPConfigurationLoadBalancerAddressPool iPConfigurationLoadBalancerAddressPoolJsonInstance = new IPConfigurationLoadBalancerAddressPool();
                                                                                virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerBackendAddressPools.Add(iPConfigurationLoadBalancerAddressPoolJsonInstance);
                                                                                
                                                                                JToken idValue3 = loadBalancerBackendAddressPoolsValue["id"];
                                                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                                                {
                                                                                    string idInstance3 = ((string)idValue3);
                                                                                    iPConfigurationLoadBalancerAddressPoolJsonInstance.ReferenceUri = idInstance3;
                                                                                }
                                                                            }
                                                                        }
                                                                        
                                                                        JToken loadBalancerBackendAddressPoolsArray2 = propertiesValue3["loadBalancerBackendAddressPools"];
                                                                        if (loadBalancerBackendAddressPoolsArray2 != null && loadBalancerBackendAddressPoolsArray2.Type != JTokenType.Null)
                                                                        {
                                                                            foreach (JToken loadBalancerBackendAddressPoolsValue2 in ((JArray)loadBalancerBackendAddressPoolsArray2))
                                                                            {
                                                                                IPConfigurationLoadBalancerInboundNATPool iPConfigurationLoadBalancerInboundNATPoolJsonInstance = new IPConfigurationLoadBalancerInboundNATPool();
                                                                                virtualMachineScaleSetIPConfigurationJsonInstance.LoadBalancerInboundNatPools.Add(iPConfigurationLoadBalancerInboundNATPoolJsonInstance);
                                                                                
                                                                                JToken idValue4 = loadBalancerBackendAddressPoolsValue2["id"];
                                                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                                                {
                                                                                    string idInstance4 = ((string)idValue4);
                                                                                    iPConfigurationLoadBalancerInboundNATPoolJsonInstance.ReferenceUri = idInstance4;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken extensionProfileValue = virtualMachineProfileValue["extensionProfile"];
                                            if (extensionProfileValue != null && extensionProfileValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineScaleSetExtensionProfile extensionProfileInstance = new VirtualMachineScaleSetExtensionProfile();
                                                virtualMachineProfileInstance.ExtensionProfile = extensionProfileInstance;
                                                
                                                JToken extensionsArray = extensionProfileValue["extensions"];
                                                if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                                {
                                                    extensionProfileInstance.Extensions = new List<VirtualMachineScaleSetExtension>();
                                                    foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                                    {
                                                        VirtualMachineScaleSetExtension virtualMachineScaleSetExtensionJsonInstance = new VirtualMachineScaleSetExtension();
                                                        extensionProfileInstance.Extensions.Add(virtualMachineScaleSetExtensionJsonInstance);
                                                        
                                                        JToken propertiesValue4 = extensionsValue["properties"];
                                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                        {
                                                            JToken publisherValue2 = propertiesValue4["publisher"];
                                                            if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                            {
                                                                string publisherInstance2 = ((string)publisherValue2);
                                                                virtualMachineScaleSetExtensionJsonInstance.Publisher = publisherInstance2;
                                                            }
                                                            
                                                            JToken typeValue = propertiesValue4["type"];
                                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                            {
                                                                string typeInstance = ((string)typeValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.ExtensionType = typeInstance;
                                                            }
                                                            
                                                            JToken typeHandlerVersionValue = propertiesValue4["typeHandlerVersion"];
                                                            if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                            {
                                                                string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                            }
                                                            
                                                            JToken autoUpgradeMinorVersionValue = propertiesValue4["autoUpgradeMinorVersion"];
                                                            if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                            {
                                                                bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                            }
                                                            
                                                            JToken settingsValue = propertiesValue4["settings"];
                                                            if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                            {
                                                                string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                                virtualMachineScaleSetExtensionJsonInstance.Settings = settingsInstance;
                                                            }
                                                            
                                                            JToken protectedSettingsValue = propertiesValue4["protectedSettings"];
                                                            if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                            {
                                                                string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                                virtualMachineScaleSetExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                            }
                                                            
                                                            JToken provisioningStateValue = propertiesValue4["provisioningState"];
                                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                            {
                                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                                virtualMachineScaleSetExtensionJsonInstance.ProvisioningState = provisioningStateInstance;
                                                            }
                                                        }
                                                        
                                                        JToken idValue5 = extensionsValue["id"];
                                                        if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                        {
                                                            string idInstance5 = ((string)idValue5);
                                                            virtualMachineScaleSetExtensionJsonInstance.Id = idInstance5;
                                                        }
                                                        
                                                        JToken nameValue5 = extensionsValue["name"];
                                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance5 = ((string)nameValue5);
                                                            virtualMachineScaleSetExtensionJsonInstance.Name = nameInstance5;
                                                        }
                                                        
                                                        JToken typeValue2 = extensionsValue["type"];
                                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance2 = ((string)typeValue2);
                                                            virtualMachineScaleSetExtensionJsonInstance.Type = typeInstance2;
                                                        }
                                                        
                                                        JToken locationValue = extensionsValue["location"];
                                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                        {
                                                            string locationInstance = ((string)locationValue);
                                                            virtualMachineScaleSetExtensionJsonInstance.Location = locationInstance;
                                                        }
                                                        
                                                        JToken tagsSequenceElement = ((JToken)extensionsValue["tags"]);
                                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property in tagsSequenceElement)
                                                            {
                                                                string tagsKey = ((string)property.Name);
                                                                string tagsValue = ((string)property.Value);
                                                                virtualMachineScaleSetExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualMachineScaleSetJsonInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                    }
                                    
                                    JToken idValue6 = valueValue["id"];
                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                    {
                                        string idInstance6 = ((string)idValue6);
                                        virtualMachineScaleSetJsonInstance.Id = idInstance6;
                                    }
                                    
                                    JToken nameValue6 = valueValue["name"];
                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                    {
                                        string nameInstance6 = ((string)nameValue6);
                                        virtualMachineScaleSetJsonInstance.Name = nameInstance6;
                                    }
                                    
                                    JToken typeValue3 = valueValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        virtualMachineScaleSetJsonInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualMachineScaleSetJsonInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualMachineScaleSetJsonInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to list available skus for a virtual machine scale
        /// set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Virtual Machine Scale Set List Skus operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetListSkusResponse> ListSkusAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "ListSkusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/skus";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetListSkusResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetListSkusResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineScaleSetSku virtualMachineScaleSetSkuInstance = new VirtualMachineScaleSetSku();
                                    result.VirtualMachineScaleSetAvailableSkus.Add(virtualMachineScaleSetSkuInstance);
                                    
                                    JToken resourceTypeValue = valueValue["resourceType"];
                                    if (resourceTypeValue != null && resourceTypeValue.Type != JTokenType.Null)
                                    {
                                        string resourceTypeInstance = ((string)resourceTypeValue);
                                        virtualMachineScaleSetSkuInstance.ResourceType = resourceTypeInstance;
                                    }
                                    
                                    JToken skuValue = valueValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        Sku skuInstance = new Sku();
                                        virtualMachineScaleSetSkuInstance.Sku = skuInstance;
                                        
                                        JToken nameValue = skuValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            skuInstance.Name = nameInstance;
                                        }
                                        
                                        JToken tierValue = skuValue["tier"];
                                        if (tierValue != null && tierValue.Type != JTokenType.Null)
                                        {
                                            string tierInstance = ((string)tierValue);
                                            skuInstance.Tier = tierInstance;
                                        }
                                        
                                        JToken capacityValue = skuValue["capacity"];
                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                        {
                                            uint capacityInstance = ((uint)capacityValue);
                                            skuInstance.Capacity = capacityInstance;
                                        }
                                    }
                                    
                                    JToken capacityValue2 = valueValue["capacity"];
                                    if (capacityValue2 != null && capacityValue2.Type != JTokenType.Null)
                                    {
                                        VirtualMachineScaleSetSkuCapacity capacityInstance2 = new VirtualMachineScaleSetSkuCapacity();
                                        virtualMachineScaleSetSkuInstance.Capacity = capacityInstance2;
                                        
                                        JToken minimumValue = capacityValue2["minimum"];
                                        if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                        {
                                            uint minimumInstance = ((uint)minimumValue);
                                            capacityInstance2.Minimum = minimumInstance;
                                        }
                                        
                                        JToken maximumValue = capacityValue2["maximum"];
                                        if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                        {
                                            uint maximumInstance = ((uint)maximumValue);
                                            capacityInstance2.Maximum = maximumInstance;
                                        }
                                        
                                        JToken defaultCapacityValue = capacityValue2["defaultCapacity"];
                                        if (defaultCapacityValue != null && defaultCapacityValue.Type != JTokenType.Null)
                                        {
                                            uint defaultCapacityInstance = ((uint)defaultCapacityValue);
                                            capacityInstance2.DefaultCapacity = defaultCapacityInstance;
                                        }
                                        
                                        JToken scaleTypeValue = capacityValue2["scaleType"];
                                        if (scaleTypeValue != null && scaleTypeValue.Type != JTokenType.Null)
                                        {
                                            string scaleTypeInstance = ((string)scaleTypeValue);
                                            capacityInstance2.ScaleType = scaleTypeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> PowerOffAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "PowerOffAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginPoweringOffAsync(resourceGroupName, vmScaleSetName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to power off (stop) virtual machines in a virtual
        /// machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> PowerOffInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "PowerOffInstancesAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginPoweringOffInstancesAsync(resourceGroupName, vmScaleSetName, vmInstanceIDs, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to restart a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> RestartAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginRestartingAsync(resourceGroupName, vmScaleSetName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to restart virtual machines in a virtual machine
        /// scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> RestartInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "RestartInstancesAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginRestartingInstancesAsync(resourceGroupName, vmScaleSetName, vmInstanceIDs, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to start a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> StartAsync(string resourceGroupName, string vmScaleSetName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                TracingAdapter.Enter(invocationId, this, "StartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginStartingAsync(resourceGroupName, vmScaleSetName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to start virtual machines in a virtual machine scale
        /// set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> StartInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "StartInstancesAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginStartingInstancesAsync(resourceGroupName, vmScaleSetName, vmInstanceIDs, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to manually upgrade virtual machines in a virtual
        /// machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='vmInstanceIDs'>
        /// Required. The list of virtual machine scale set instance IDs.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> UpdateInstancesAsync(string resourceGroupName, string vmScaleSetName, VirtualMachineScaleSetVMInstanceIDs vmInstanceIDs, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("vmInstanceIDs", vmInstanceIDs);
                TracingAdapter.Enter(invocationId, this, "UpdateInstancesAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSets.BeginUpdatingInstancesAsync(resourceGroupName, vmScaleSetName, vmInstanceIDs, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
