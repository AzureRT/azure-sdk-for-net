// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Compute
{
    /// <summary>
    /// Operations for managing the virtual machine scale set virtual machines
    /// in compute management.
    /// </summary>
    internal partial class VirtualMachineScaleSetVMOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineScaleSetVMOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineScaleSetVMOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineScaleSetVMOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The operation to deallocate a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginDeallocatingAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginDeallocatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/virtualmachines/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/deallocate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to delete a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> BeginDeletingAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/virtualmachines/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeleteOperationResponse result = null;
                    // Deserialize Response
                    result = new DeleteOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginPoweringOffAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginPoweringOffAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/virtualmachines/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/poweroff";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to restart a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginRestartingAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/virtualmachines/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to start a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginStartingAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginStartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/virtualmachines/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/start";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to deallocate a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> DeallocateAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "DeallocateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSetVMs.BeginDeallocatingAsync(resourceGroupName, vmScaleSetName, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to delete a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> DeleteAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse response = await client.VirtualMachineScaleSetVMs.BeginDeletingAsync(resourceGroupName, vmScaleSetName, instanceId, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to get a virtual machine scale set virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetVirtualMachineScaleSetVM operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetVMGetResponse> GetAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/virtualmachines/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetVMGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetVMGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineScaleSetVM virtualMachineScaleSetVMInstance = new VirtualMachineScaleSetVM();
                            result.VirtualMachineScaleSetVM = virtualMachineScaleSetVMInstance;
                            
                            JToken instanceIdValue = responseDoc["instanceId"];
                            if (instanceIdValue != null && instanceIdValue.Type != JTokenType.Null)
                            {
                                string instanceIdInstance = ((string)instanceIdValue);
                                virtualMachineScaleSetVMInstance.InstanceId = instanceIdInstance;
                            }
                            
                            JToken skuValue = responseDoc["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                Sku skuInstance = new Sku();
                                virtualMachineScaleSetVMInstance.Sku = skuInstance;
                                
                                JToken nameValue = skuValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    skuInstance.Name = nameInstance;
                                }
                                
                                JToken tierValue = skuValue["tier"];
                                if (tierValue != null && tierValue.Type != JTokenType.Null)
                                {
                                    string tierInstance = ((string)tierValue);
                                    skuInstance.Tier = tierInstance;
                                }
                                
                                JToken capacityValue = skuValue["capacity"];
                                if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                {
                                    uint capacityInstance = ((uint)capacityValue);
                                    skuInstance.Capacity = capacityInstance;
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken latestModelAppliedValue = propertiesValue["latestModelApplied"];
                                if (latestModelAppliedValue != null && latestModelAppliedValue.Type != JTokenType.Null)
                                {
                                    bool latestModelAppliedInstance = ((bool)latestModelAppliedValue);
                                    virtualMachineScaleSetVMInstance.LatestModelApplied = latestModelAppliedInstance;
                                }
                                
                                JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                {
                                    HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                    virtualMachineScaleSetVMInstance.HardwareProfile = hardwareProfileInstance;
                                    
                                    JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                    if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                    {
                                        string vmSizeInstance = ((string)vmSizeValue);
                                        hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                    }
                                }
                                
                                JToken storageProfileValue = propertiesValue["storageProfile"];
                                if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                {
                                    StorageProfile storageProfileInstance = new StorageProfile();
                                    virtualMachineScaleSetVMInstance.StorageProfile = storageProfileInstance;
                                    
                                    JToken imageReferenceValue = storageProfileValue["imageReference"];
                                    if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                    {
                                        ImageReference imageReferenceInstance = new ImageReference();
                                        storageProfileInstance.ImageReference = imageReferenceInstance;
                                        
                                        JToken publisherValue = imageReferenceValue["publisher"];
                                        if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                        {
                                            string publisherInstance = ((string)publisherValue);
                                            imageReferenceInstance.Publisher = publisherInstance;
                                        }
                                        
                                        JToken offerValue = imageReferenceValue["offer"];
                                        if (offerValue != null && offerValue.Type != JTokenType.Null)
                                        {
                                            string offerInstance = ((string)offerValue);
                                            imageReferenceInstance.Offer = offerInstance;
                                        }
                                        
                                        JToken skuValue2 = imageReferenceValue["sku"];
                                        if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                                        {
                                            string skuInstance2 = ((string)skuValue2);
                                            imageReferenceInstance.Sku = skuInstance2;
                                        }
                                        
                                        JToken versionValue = imageReferenceValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            imageReferenceInstance.Version = versionInstance;
                                        }
                                    }
                                    
                                    JToken osDiskValue = storageProfileValue["osDisk"];
                                    if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                    {
                                        OSDisk osDiskInstance = new OSDisk();
                                        storageProfileInstance.OSDisk = osDiskInstance;
                                        
                                        JToken osTypeValue = osDiskValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            osDiskInstance.OperatingSystemType = osTypeInstance;
                                        }
                                        
                                        JToken nameValue2 = osDiskValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            osDiskInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken vhdValue = osDiskValue["vhd"];
                                        if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                            osDiskInstance.VirtualHardDisk = vhdInstance;
                                            
                                            JToken uriValue = vhdValue["uri"];
                                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                                            {
                                                string uriInstance = ((string)uriValue);
                                                vhdInstance.Uri = uriInstance;
                                            }
                                        }
                                        
                                        JToken imageValue = osDiskValue["image"];
                                        if (imageValue != null && imageValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk imageInstance = new VirtualHardDisk();
                                            osDiskInstance.SourceImage = imageInstance;
                                            
                                            JToken uriValue2 = imageValue["uri"];
                                            if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                            {
                                                string uriInstance2 = ((string)uriValue2);
                                                imageInstance.Uri = uriInstance2;
                                            }
                                        }
                                        
                                        JToken cachingValue = osDiskValue["caching"];
                                        if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                        {
                                            string cachingInstance = ((string)cachingValue);
                                            osDiskInstance.Caching = cachingInstance;
                                        }
                                        
                                        JToken createOptionValue = osDiskValue["createOption"];
                                        if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                        {
                                            string createOptionInstance = ((string)createOptionValue);
                                            osDiskInstance.CreateOption = createOptionInstance;
                                        }
                                        
                                        JToken diskSizeGBValue = osDiskValue["diskSizeGB"];
                                        if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                        {
                                            int diskSizeGBInstance = ((int)diskSizeGBValue);
                                            osDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                        }
                                    }
                                    
                                    JToken dataDisksArray = storageProfileValue["dataDisks"];
                                    if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                        {
                                            DataDisk dataDiskInstance = new DataDisk();
                                            storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                            
                                            JToken lunValue = dataDisksValue["lun"];
                                            if (lunValue != null && lunValue.Type != JTokenType.Null)
                                            {
                                                int lunInstance = ((int)lunValue);
                                                dataDiskInstance.Lun = lunInstance;
                                            }
                                            
                                            JToken nameValue3 = dataDisksValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                dataDiskInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken vhdValue2 = dataDisksValue["vhd"];
                                            if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                
                                                JToken uriValue3 = vhdValue2["uri"];
                                                if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                {
                                                    string uriInstance3 = ((string)uriValue3);
                                                    vhdInstance2.Uri = uriInstance3;
                                                }
                                            }
                                            
                                            JToken imageValue2 = dataDisksValue["image"];
                                            if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.SourceImage = imageInstance2;
                                                
                                                JToken uriValue4 = imageValue2["uri"];
                                                if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                {
                                                    string uriInstance4 = ((string)uriValue4);
                                                    imageInstance2.Uri = uriInstance4;
                                                }
                                            }
                                            
                                            JToken cachingValue2 = dataDisksValue["caching"];
                                            if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                            {
                                                string cachingInstance2 = ((string)cachingValue2);
                                                dataDiskInstance.Caching = cachingInstance2;
                                            }
                                            
                                            JToken createOptionValue2 = dataDisksValue["createOption"];
                                            if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance2 = ((string)createOptionValue2);
                                                dataDiskInstance.CreateOption = createOptionInstance2;
                                            }
                                            
                                            JToken diskSizeGBValue2 = dataDisksValue["diskSizeGB"];
                                            if (diskSizeGBValue2 != null && diskSizeGBValue2.Type != JTokenType.Null)
                                            {
                                                int diskSizeGBInstance2 = ((int)diskSizeGBValue2);
                                                dataDiskInstance.DiskSizeGB = diskSizeGBInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken osProfileValue = propertiesValue["osProfile"];
                                if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                {
                                    OSProfile osProfileInstance = new OSProfile();
                                    virtualMachineScaleSetVMInstance.OSProfile = osProfileInstance;
                                    
                                    JToken computerNameValue = osProfileValue["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        osProfileInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken adminUsernameValue = osProfileValue["adminUsername"];
                                    if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                    {
                                        string adminUsernameInstance = ((string)adminUsernameValue);
                                        osProfileInstance.AdminUsername = adminUsernameInstance;
                                    }
                                    
                                    JToken adminPasswordValue = osProfileValue["adminPassword"];
                                    if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                    {
                                        string adminPasswordInstance = ((string)adminPasswordValue);
                                        osProfileInstance.AdminPassword = adminPasswordInstance;
                                    }
                                    
                                    JToken customDataValue = osProfileValue["customData"];
                                    if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                    {
                                        string customDataInstance = ((string)customDataValue);
                                        osProfileInstance.CustomData = customDataInstance;
                                    }
                                    
                                    JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                    if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                        osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                        
                                        JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                        if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                        {
                                            bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                            windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                        }
                                        
                                        JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                        if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                        {
                                            bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                            windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                        }
                                        
                                        JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                        if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                            {
                                                AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                
                                                JToken passNameValue = additionalUnattendContentValue["passName"];
                                                if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                {
                                                    string passNameInstance = ((string)passNameValue);
                                                    additionalUnattendContentInstance.PassName = passNameInstance;
                                                }
                                                
                                                JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                {
                                                    string componentNameInstance = ((string)componentNameValue);
                                                    additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                }
                                                
                                                JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                {
                                                    string settingNameInstance = ((string)settingNameValue);
                                                    additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                }
                                                
                                                JToken contentValue = additionalUnattendContentValue["content"];
                                                if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                {
                                                    string contentInstance = ((string)contentValue);
                                                    additionalUnattendContentInstance.Content = contentInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken winRMValue = windowsConfigurationValue["winRM"];
                                        if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                        {
                                            WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                            windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                            
                                            JToken listenersArray = winRMValue["listeners"];
                                            if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken listenersValue in ((JArray)listenersArray))
                                                {
                                                    WinRMListener winRMListenerInstance = new WinRMListener();
                                                    winRMInstance.Listeners.Add(winRMListenerInstance);
                                                    
                                                    JToken protocolValue = listenersValue["protocol"];
                                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance = ((string)protocolValue);
                                                        winRMListenerInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                    if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                    {
                                                        Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                        winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                    if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                        osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                        
                                        JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                        if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                        {
                                            bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                            linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                        }
                                        
                                        JToken sshValue = linuxConfigurationValue["ssh"];
                                        if (sshValue != null && sshValue.Type != JTokenType.Null)
                                        {
                                            SshConfiguration sshInstance = new SshConfiguration();
                                            linuxConfigurationInstance.SshConfiguration = sshInstance;
                                            
                                            JToken publicKeysArray = sshValue["publicKeys"];
                                            if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                {
                                                    SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                    sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                    
                                                    JToken pathValue = publicKeysValue["path"];
                                                    if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                    {
                                                        string pathInstance = ((string)pathValue);
                                                        sshPublicKeyInstance.Path = pathInstance;
                                                    }
                                                    
                                                    JToken keyDataValue = publicKeysValue["keyData"];
                                                    if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                    {
                                                        string keyDataInstance = ((string)keyDataValue);
                                                        sshPublicKeyInstance.KeyData = keyDataInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken secretsArray = osProfileValue["secrets"];
                                    if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken secretsValue in ((JArray)secretsArray))
                                        {
                                            VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                            osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                            
                                            JToken sourceVaultValue = secretsValue["sourceVault"];
                                            if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                            {
                                                SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                vaultSecretGroupInstance.SourceVault = sourceVaultInstance;
                                                
                                                JToken idValue = sourceVaultValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    sourceVaultInstance.ReferenceUri = idInstance;
                                                }
                                            }
                                            
                                            JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                            if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                {
                                                    VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                    vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                    
                                                    JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                    if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                    {
                                                        string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                        vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                    }
                                                    
                                                    JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                    if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                    {
                                                        string certificateStoreInstance = ((string)certificateStoreValue);
                                                        vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken networkProfileValue = propertiesValue["networkProfile"];
                                if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                {
                                    NetworkProfile networkProfileInstance = new NetworkProfile();
                                    virtualMachineScaleSetVMInstance.NetworkProfile = networkProfileInstance;
                                    
                                    JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                    if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                        {
                                            NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                            networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                            
                                            JToken propertiesValue2 = networkInterfacesValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                JToken primaryValue = propertiesValue2["primary"];
                                                if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                {
                                                    bool primaryInstance = ((bool)primaryValue);
                                                    networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                }
                                            }
                                            
                                            JToken idValue2 = networkInterfacesValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken diagnosticsProfileValue = propertiesValue["diagnosticsProfile"];
                                if (diagnosticsProfileValue != null && diagnosticsProfileValue.Type != JTokenType.Null)
                                {
                                    DiagnosticsProfile diagnosticsProfileInstance = new DiagnosticsProfile();
                                    virtualMachineScaleSetVMInstance.DiagnosticsProfile = diagnosticsProfileInstance;
                                    
                                    JToken bootDiagnosticsValue = diagnosticsProfileValue["bootDiagnostics"];
                                    if (bootDiagnosticsValue != null && bootDiagnosticsValue.Type != JTokenType.Null)
                                    {
                                        BootDiagnostics bootDiagnosticsInstance = new BootDiagnostics();
                                        diagnosticsProfileInstance.BootDiagnostics = bootDiagnosticsInstance;
                                        
                                        JToken enabledValue = bootDiagnosticsValue["enabled"];
                                        if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                        {
                                            bool enabledInstance = ((bool)enabledValue);
                                            bootDiagnosticsInstance.Enabled = enabledInstance;
                                        }
                                        
                                        JToken storageUriValue = bootDiagnosticsValue["storageUri"];
                                        if (storageUriValue != null && storageUriValue.Type != JTokenType.Null)
                                        {
                                            Uri storageUriInstance = TypeConversion.TryParseUri(((string)storageUriValue));
                                            bootDiagnosticsInstance.StorageUri = storageUriInstance;
                                        }
                                    }
                                }
                                
                                JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                {
                                    AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                    virtualMachineScaleSetVMInstance.AvailabilitySetReference = availabilitySetInstance;
                                    
                                    JToken idValue3 = availabilitySetValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        availabilitySetInstance.ReferenceUri = idInstance3;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineScaleSetVMInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue = propertiesValue["instanceView"];
                                if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                    virtualMachineScaleSetVMInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                    if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                        instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                    }
                                    
                                    JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                    if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                        instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                    }
                                    
                                    JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                    if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                    {
                                        string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                        instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                    }
                                    
                                    JToken vmAgentValue = instanceViewValue["vmAgent"];
                                    if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                    {
                                        VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                        instanceViewInstance.VMAgent = vmAgentInstance;
                                        
                                        JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                        if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                        {
                                            string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                            vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                        }
                                        
                                        JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                        if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                            {
                                                VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                
                                                JToken typeValue = extensionHandlersValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                }
                                                
                                                JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                }
                                                
                                                JToken statusValue = extensionHandlersValue["status"];
                                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                {
                                                    InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                    
                                                    JToken codeValue = statusValue["code"];
                                                    if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance = ((string)codeValue);
                                                        statusInstance.Code = codeInstance;
                                                    }
                                                    
                                                    JToken levelValue = statusValue["level"];
                                                    if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance = ((string)levelValue);
                                                        statusInstance.Level = levelInstance;
                                                    }
                                                    
                                                    JToken displayStatusValue = statusValue["displayStatus"];
                                                    if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance = ((string)displayStatusValue);
                                                        statusInstance.DisplayStatus = displayStatusInstance;
                                                    }
                                                    
                                                    JToken messageValue = statusValue["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        statusInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken timeValue = statusValue["time"];
                                                    if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                        statusInstance.Time = timeInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray = vmAgentValue["statuses"];
                                        if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue in ((JArray)statusesArray))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                
                                                JToken codeValue2 = statusesValue["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    instanceViewStatusInstance.Code = codeInstance2;
                                                }
                                                
                                                JToken levelValue2 = statusesValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    instanceViewStatusInstance.Level = levelInstance2;
                                                }
                                                
                                                JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance2 = ((string)displayStatusValue2);
                                                    instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                }
                                                
                                                JToken messageValue2 = statusesValue["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    instanceViewStatusInstance.Message = messageInstance2;
                                                }
                                                
                                                JToken timeValue2 = statusesValue["time"];
                                                if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                    instanceViewStatusInstance.Time = timeInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken disksArray = instanceViewValue["disks"];
                                    if (disksArray != null && disksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken disksValue in ((JArray)disksArray))
                                        {
                                            DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                            instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                            
                                            JToken nameValue4 = disksValue["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                diskInstanceViewInstance.Name = nameInstance4;
                                            }
                                            
                                            JToken statusesArray2 = disksValue["statuses"];
                                            if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                    diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                    
                                                    JToken codeValue3 = statusesValue2["code"];
                                                    if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance3 = ((string)codeValue3);
                                                        instanceViewStatusInstance2.Code = codeInstance3;
                                                    }
                                                    
                                                    JToken levelValue3 = statusesValue2["level"];
                                                    if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance3 = ((string)levelValue3);
                                                        instanceViewStatusInstance2.Level = levelInstance3;
                                                    }
                                                    
                                                    JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                    if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance3 = ((string)displayStatusValue3);
                                                        instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                    }
                                                    
                                                    JToken messageValue3 = statusesValue2["message"];
                                                    if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance3 = ((string)messageValue3);
                                                        instanceViewStatusInstance2.Message = messageInstance3;
                                                    }
                                                    
                                                    JToken timeValue3 = statusesValue2["time"];
                                                    if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                        instanceViewStatusInstance2.Time = timeInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionsArray = instanceViewValue["extensions"];
                                    if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                        {
                                            VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                            instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                            
                                            JToken nameValue5 = extensionsValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken typeValue2 = extensionsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                            }
                                            
                                            JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                            if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                            }
                                            
                                            JToken substatusesArray = extensionsValue["substatuses"];
                                            if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                    
                                                    JToken codeValue4 = substatusesValue["code"];
                                                    if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance4 = ((string)codeValue4);
                                                        instanceViewStatusInstance3.Code = codeInstance4;
                                                    }
                                                    
                                                    JToken levelValue4 = substatusesValue["level"];
                                                    if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance4 = ((string)levelValue4);
                                                        instanceViewStatusInstance3.Level = levelInstance4;
                                                    }
                                                    
                                                    JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                    if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance4 = ((string)displayStatusValue4);
                                                        instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                    }
                                                    
                                                    JToken messageValue4 = substatusesValue["message"];
                                                    if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance4 = ((string)messageValue4);
                                                        instanceViewStatusInstance3.Message = messageInstance4;
                                                    }
                                                    
                                                    JToken timeValue4 = substatusesValue["time"];
                                                    if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                        instanceViewStatusInstance3.Time = timeInstance4;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray3 = extensionsValue["statuses"];
                                            if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                    
                                                    JToken codeValue5 = statusesValue3["code"];
                                                    if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance5 = ((string)codeValue5);
                                                        instanceViewStatusInstance4.Code = codeInstance5;
                                                    }
                                                    
                                                    JToken levelValue5 = statusesValue3["level"];
                                                    if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance5 = ((string)levelValue5);
                                                        instanceViewStatusInstance4.Level = levelInstance5;
                                                    }
                                                    
                                                    JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                    if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance5 = ((string)displayStatusValue5);
                                                        instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                    }
                                                    
                                                    JToken messageValue5 = statusesValue3["message"];
                                                    if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance5 = ((string)messageValue5);
                                                        instanceViewStatusInstance4.Message = messageInstance5;
                                                    }
                                                    
                                                    JToken timeValue5 = statusesValue3["time"];
                                                    if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                        instanceViewStatusInstance4.Time = timeInstance5;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken bootDiagnosticsValue2 = instanceViewValue["bootDiagnostics"];
                                    if (bootDiagnosticsValue2 != null && bootDiagnosticsValue2.Type != JTokenType.Null)
                                    {
                                        BootDiagnosticsInstanceView bootDiagnosticsInstance2 = new BootDiagnosticsInstanceView();
                                        instanceViewInstance.BootDiagnostics = bootDiagnosticsInstance2;
                                        
                                        JToken consoleScreenshotBlobUriValue = bootDiagnosticsValue2["consoleScreenshotBlobUri"];
                                        if (consoleScreenshotBlobUriValue != null && consoleScreenshotBlobUriValue.Type != JTokenType.Null)
                                        {
                                            Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue));
                                            bootDiagnosticsInstance2.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                        }
                                        
                                        JToken serialConsoleLogBlobUriValue = bootDiagnosticsValue2["serialConsoleLogBlobUri"];
                                        if (serialConsoleLogBlobUriValue != null && serialConsoleLogBlobUriValue.Type != JTokenType.Null)
                                        {
                                            Uri serialConsoleLogBlobUriInstance = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue));
                                            bootDiagnosticsInstance2.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance;
                                        }
                                    }
                                    
                                    JToken statusesArray4 = instanceViewValue["statuses"];
                                    if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                            
                                            JToken codeValue6 = statusesValue4["code"];
                                            if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                            {
                                                string codeInstance6 = ((string)codeValue6);
                                                instanceViewStatusInstance5.Code = codeInstance6;
                                            }
                                            
                                            JToken levelValue6 = statusesValue4["level"];
                                            if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                            {
                                                string levelInstance6 = ((string)levelValue6);
                                                instanceViewStatusInstance5.Level = levelInstance6;
                                            }
                                            
                                            JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                            if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance6 = ((string)displayStatusValue6);
                                                instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                            }
                                            
                                            JToken messageValue6 = statusesValue4["message"];
                                            if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                            {
                                                string messageInstance6 = ((string)messageValue6);
                                                instanceViewStatusInstance5.Message = messageInstance6;
                                            }
                                            
                                            JToken timeValue6 = statusesValue4["time"];
                                            if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                instanceViewStatusInstance5.Time = timeInstance6;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken instanceViewValue2 = responseDoc["instanceView"];
                            if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                            {
                                VirtualMachineInstanceView instanceViewInstance2 = new VirtualMachineInstanceView();
                                virtualMachineScaleSetVMInstance.InstanceView = instanceViewInstance2;
                                
                                JToken platformUpdateDomainValue2 = instanceViewValue2["platformUpdateDomain"];
                                if (platformUpdateDomainValue2 != null && platformUpdateDomainValue2.Type != JTokenType.Null)
                                {
                                    int platformUpdateDomainInstance2 = ((int)platformUpdateDomainValue2);
                                    instanceViewInstance2.PlatformUpdateDomain = platformUpdateDomainInstance2;
                                }
                                
                                JToken platformFaultDomainValue2 = instanceViewValue2["platformFaultDomain"];
                                if (platformFaultDomainValue2 != null && platformFaultDomainValue2.Type != JTokenType.Null)
                                {
                                    int platformFaultDomainInstance2 = ((int)platformFaultDomainValue2);
                                    instanceViewInstance2.PlatformFaultDomain = platformFaultDomainInstance2;
                                }
                                
                                JToken rdpThumbPrintValue2 = instanceViewValue2["rdpThumbPrint"];
                                if (rdpThumbPrintValue2 != null && rdpThumbPrintValue2.Type != JTokenType.Null)
                                {
                                    string rdpThumbPrintInstance2 = ((string)rdpThumbPrintValue2);
                                    instanceViewInstance2.RemoteDesktopThumbprint = rdpThumbPrintInstance2;
                                }
                                
                                JToken vmAgentValue2 = instanceViewValue2["vmAgent"];
                                if (vmAgentValue2 != null && vmAgentValue2.Type != JTokenType.Null)
                                {
                                    VirtualMachineAgentInstanceView vmAgentInstance2 = new VirtualMachineAgentInstanceView();
                                    instanceViewInstance2.VMAgent = vmAgentInstance2;
                                    
                                    JToken vmAgentVersionValue2 = vmAgentValue2["vmAgentVersion"];
                                    if (vmAgentVersionValue2 != null && vmAgentVersionValue2.Type != JTokenType.Null)
                                    {
                                        string vmAgentVersionInstance2 = ((string)vmAgentVersionValue2);
                                        vmAgentInstance2.VMAgentVersion = vmAgentVersionInstance2;
                                    }
                                    
                                    JToken extensionHandlersArray2 = vmAgentValue2["extensionHandlers"];
                                    if (extensionHandlersArray2 != null && extensionHandlersArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken extensionHandlersValue2 in ((JArray)extensionHandlersArray2))
                                        {
                                            VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance2 = new VirtualMachineExtensionHandlerInstanceView();
                                            vmAgentInstance2.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance2);
                                            
                                            JToken typeValue3 = extensionHandlersValue2["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                virtualMachineExtensionHandlerInstanceViewInstance2.Type = typeInstance3;
                                            }
                                            
                                            JToken typeHandlerVersionValue3 = extensionHandlersValue2["typeHandlerVersion"];
                                            if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                                virtualMachineExtensionHandlerInstanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance3;
                                            }
                                            
                                            JToken statusValue2 = extensionHandlersValue2["status"];
                                            if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                            {
                                                InstanceViewStatus statusInstance2 = new InstanceViewStatus();
                                                virtualMachineExtensionHandlerInstanceViewInstance2.Status = statusInstance2;
                                                
                                                JToken codeValue7 = statusValue2["code"];
                                                if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                {
                                                    string codeInstance7 = ((string)codeValue7);
                                                    statusInstance2.Code = codeInstance7;
                                                }
                                                
                                                JToken levelValue7 = statusValue2["level"];
                                                if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                {
                                                    string levelInstance7 = ((string)levelValue7);
                                                    statusInstance2.Level = levelInstance7;
                                                }
                                                
                                                JToken displayStatusValue7 = statusValue2["displayStatus"];
                                                if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance7 = ((string)displayStatusValue7);
                                                    statusInstance2.DisplayStatus = displayStatusInstance7;
                                                }
                                                
                                                JToken messageValue7 = statusValue2["message"];
                                                if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                {
                                                    string messageInstance7 = ((string)messageValue7);
                                                    statusInstance2.Message = messageInstance7;
                                                }
                                                
                                                JToken timeValue7 = statusValue2["time"];
                                                if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                    statusInstance2.Time = timeInstance7;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray5 = vmAgentValue2["statuses"];
                                    if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                            vmAgentInstance2.Statuses.Add(instanceViewStatusInstance6);
                                            
                                            JToken codeValue8 = statusesValue5["code"];
                                            if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                            {
                                                string codeInstance8 = ((string)codeValue8);
                                                instanceViewStatusInstance6.Code = codeInstance8;
                                            }
                                            
                                            JToken levelValue8 = statusesValue5["level"];
                                            if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                            {
                                                string levelInstance8 = ((string)levelValue8);
                                                instanceViewStatusInstance6.Level = levelInstance8;
                                            }
                                            
                                            JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                            if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance8 = ((string)displayStatusValue8);
                                                instanceViewStatusInstance6.DisplayStatus = displayStatusInstance8;
                                            }
                                            
                                            JToken messageValue8 = statusesValue5["message"];
                                            if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                            {
                                                string messageInstance8 = ((string)messageValue8);
                                                instanceViewStatusInstance6.Message = messageInstance8;
                                            }
                                            
                                            JToken timeValue8 = statusesValue5["time"];
                                            if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                instanceViewStatusInstance6.Time = timeInstance8;
                                            }
                                        }
                                    }
                                }
                                
                                JToken disksArray2 = instanceViewValue2["disks"];
                                if (disksArray2 != null && disksArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken disksValue2 in ((JArray)disksArray2))
                                    {
                                        DiskInstanceView diskInstanceViewInstance2 = new DiskInstanceView();
                                        instanceViewInstance2.Disks.Add(diskInstanceViewInstance2);
                                        
                                        JToken nameValue6 = disksValue2["name"];
                                        if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                        {
                                            string nameInstance6 = ((string)nameValue6);
                                            diskInstanceViewInstance2.Name = nameInstance6;
                                        }
                                        
                                        JToken statusesArray6 = disksValue2["statuses"];
                                        if (statusesArray6 != null && statusesArray6.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue6 in ((JArray)statusesArray6))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                diskInstanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                
                                                JToken codeValue9 = statusesValue6["code"];
                                                if (codeValue9 != null && codeValue9.Type != JTokenType.Null)
                                                {
                                                    string codeInstance9 = ((string)codeValue9);
                                                    instanceViewStatusInstance7.Code = codeInstance9;
                                                }
                                                
                                                JToken levelValue9 = statusesValue6["level"];
                                                if (levelValue9 != null && levelValue9.Type != JTokenType.Null)
                                                {
                                                    string levelInstance9 = ((string)levelValue9);
                                                    instanceViewStatusInstance7.Level = levelInstance9;
                                                }
                                                
                                                JToken displayStatusValue9 = statusesValue6["displayStatus"];
                                                if (displayStatusValue9 != null && displayStatusValue9.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance9 = ((string)displayStatusValue9);
                                                    instanceViewStatusInstance7.DisplayStatus = displayStatusInstance9;
                                                }
                                                
                                                JToken messageValue9 = statusesValue6["message"];
                                                if (messageValue9 != null && messageValue9.Type != JTokenType.Null)
                                                {
                                                    string messageInstance9 = ((string)messageValue9);
                                                    instanceViewStatusInstance7.Message = messageInstance9;
                                                }
                                                
                                                JToken timeValue9 = statusesValue6["time"];
                                                if (timeValue9 != null && timeValue9.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance9 = ((DateTimeOffset)timeValue9);
                                                    instanceViewStatusInstance7.Time = timeInstance9;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken extensionsArray2 = instanceViewValue2["extensions"];
                                if (extensionsArray2 != null && extensionsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken extensionsValue2 in ((JArray)extensionsArray2))
                                    {
                                        VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                        instanceViewInstance2.Extensions.Add(virtualMachineExtensionInstanceViewInstance2);
                                        
                                        JToken nameValue7 = extensionsValue2["name"];
                                        if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                        {
                                            string nameInstance7 = ((string)nameValue7);
                                            virtualMachineExtensionInstanceViewInstance2.Name = nameInstance7;
                                        }
                                        
                                        JToken typeValue4 = extensionsValue2["type"];
                                        if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                        {
                                            string typeInstance4 = ((string)typeValue4);
                                            virtualMachineExtensionInstanceViewInstance2.ExtensionType = typeInstance4;
                                        }
                                        
                                        JToken typeHandlerVersionValue4 = extensionsValue2["typeHandlerVersion"];
                                        if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                        {
                                            string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                            virtualMachineExtensionInstanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                        }
                                        
                                        JToken substatusesArray2 = extensionsValue2["substatuses"];
                                        if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance8 = new InstanceViewStatus();
                                                virtualMachineExtensionInstanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance8);
                                                
                                                JToken codeValue10 = substatusesValue2["code"];
                                                if (codeValue10 != null && codeValue10.Type != JTokenType.Null)
                                                {
                                                    string codeInstance10 = ((string)codeValue10);
                                                    instanceViewStatusInstance8.Code = codeInstance10;
                                                }
                                                
                                                JToken levelValue10 = substatusesValue2["level"];
                                                if (levelValue10 != null && levelValue10.Type != JTokenType.Null)
                                                {
                                                    string levelInstance10 = ((string)levelValue10);
                                                    instanceViewStatusInstance8.Level = levelInstance10;
                                                }
                                                
                                                JToken displayStatusValue10 = substatusesValue2["displayStatus"];
                                                if (displayStatusValue10 != null && displayStatusValue10.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance10 = ((string)displayStatusValue10);
                                                    instanceViewStatusInstance8.DisplayStatus = displayStatusInstance10;
                                                }
                                                
                                                JToken messageValue10 = substatusesValue2["message"];
                                                if (messageValue10 != null && messageValue10.Type != JTokenType.Null)
                                                {
                                                    string messageInstance10 = ((string)messageValue10);
                                                    instanceViewStatusInstance8.Message = messageInstance10;
                                                }
                                                
                                                JToken timeValue10 = substatusesValue2["time"];
                                                if (timeValue10 != null && timeValue10.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance10 = ((DateTimeOffset)timeValue10);
                                                    instanceViewStatusInstance8.Time = timeInstance10;
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray7 = extensionsValue2["statuses"];
                                        if (statusesArray7 != null && statusesArray7.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue7 in ((JArray)statusesArray7))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance9 = new InstanceViewStatus();
                                                virtualMachineExtensionInstanceViewInstance2.Statuses.Add(instanceViewStatusInstance9);
                                                
                                                JToken codeValue11 = statusesValue7["code"];
                                                if (codeValue11 != null && codeValue11.Type != JTokenType.Null)
                                                {
                                                    string codeInstance11 = ((string)codeValue11);
                                                    instanceViewStatusInstance9.Code = codeInstance11;
                                                }
                                                
                                                JToken levelValue11 = statusesValue7["level"];
                                                if (levelValue11 != null && levelValue11.Type != JTokenType.Null)
                                                {
                                                    string levelInstance11 = ((string)levelValue11);
                                                    instanceViewStatusInstance9.Level = levelInstance11;
                                                }
                                                
                                                JToken displayStatusValue11 = statusesValue7["displayStatus"];
                                                if (displayStatusValue11 != null && displayStatusValue11.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance11 = ((string)displayStatusValue11);
                                                    instanceViewStatusInstance9.DisplayStatus = displayStatusInstance11;
                                                }
                                                
                                                JToken messageValue11 = statusesValue7["message"];
                                                if (messageValue11 != null && messageValue11.Type != JTokenType.Null)
                                                {
                                                    string messageInstance11 = ((string)messageValue11);
                                                    instanceViewStatusInstance9.Message = messageInstance11;
                                                }
                                                
                                                JToken timeValue11 = statusesValue7["time"];
                                                if (timeValue11 != null && timeValue11.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance11 = ((DateTimeOffset)timeValue11);
                                                    instanceViewStatusInstance9.Time = timeInstance11;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken bootDiagnosticsValue3 = instanceViewValue2["bootDiagnostics"];
                                if (bootDiagnosticsValue3 != null && bootDiagnosticsValue3.Type != JTokenType.Null)
                                {
                                    BootDiagnosticsInstanceView bootDiagnosticsInstance3 = new BootDiagnosticsInstanceView();
                                    instanceViewInstance2.BootDiagnostics = bootDiagnosticsInstance3;
                                    
                                    JToken consoleScreenshotBlobUriValue2 = bootDiagnosticsValue3["consoleScreenshotBlobUri"];
                                    if (consoleScreenshotBlobUriValue2 != null && consoleScreenshotBlobUriValue2.Type != JTokenType.Null)
                                    {
                                        Uri consoleScreenshotBlobUriInstance2 = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue2));
                                        bootDiagnosticsInstance3.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance2;
                                    }
                                    
                                    JToken serialConsoleLogBlobUriValue2 = bootDiagnosticsValue3["serialConsoleLogBlobUri"];
                                    if (serialConsoleLogBlobUriValue2 != null && serialConsoleLogBlobUriValue2.Type != JTokenType.Null)
                                    {
                                        Uri serialConsoleLogBlobUriInstance2 = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue2));
                                        bootDiagnosticsInstance3.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance2;
                                    }
                                }
                                
                                JToken statusesArray8 = instanceViewValue2["statuses"];
                                if (statusesArray8 != null && statusesArray8.Type != JTokenType.Null)
                                {
                                    foreach (JToken statusesValue8 in ((JArray)statusesArray8))
                                    {
                                        InstanceViewStatus instanceViewStatusInstance10 = new InstanceViewStatus();
                                        instanceViewInstance2.Statuses.Add(instanceViewStatusInstance10);
                                        
                                        JToken codeValue12 = statusesValue8["code"];
                                        if (codeValue12 != null && codeValue12.Type != JTokenType.Null)
                                        {
                                            string codeInstance12 = ((string)codeValue12);
                                            instanceViewStatusInstance10.Code = codeInstance12;
                                        }
                                        
                                        JToken levelValue12 = statusesValue8["level"];
                                        if (levelValue12 != null && levelValue12.Type != JTokenType.Null)
                                        {
                                            string levelInstance12 = ((string)levelValue12);
                                            instanceViewStatusInstance10.Level = levelInstance12;
                                        }
                                        
                                        JToken displayStatusValue12 = statusesValue8["displayStatus"];
                                        if (displayStatusValue12 != null && displayStatusValue12.Type != JTokenType.Null)
                                        {
                                            string displayStatusInstance12 = ((string)displayStatusValue12);
                                            instanceViewStatusInstance10.DisplayStatus = displayStatusInstance12;
                                        }
                                        
                                        JToken messageValue12 = statusesValue8["message"];
                                        if (messageValue12 != null && messageValue12.Type != JTokenType.Null)
                                        {
                                            string messageInstance12 = ((string)messageValue12);
                                            instanceViewStatusInstance10.Message = messageInstance12;
                                        }
                                        
                                        JToken timeValue12 = statusesValue8["time"];
                                        if (timeValue12 != null && timeValue12.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset timeInstance12 = ((DateTimeOffset)timeValue12);
                                            instanceViewStatusInstance10.Time = timeInstance12;
                                        }
                                    }
                                }
                            }
                            
                            JToken planValue = responseDoc["plan"];
                            if (planValue != null && planValue.Type != JTokenType.Null)
                            {
                                Plan planInstance = new Plan();
                                virtualMachineScaleSetVMInstance.Plan = planInstance;
                                
                                JToken nameValue8 = planValue["name"];
                                if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                {
                                    string nameInstance8 = ((string)nameValue8);
                                    planInstance.Name = nameInstance8;
                                }
                                
                                JToken publisherValue2 = planValue["publisher"];
                                if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                {
                                    string publisherInstance2 = ((string)publisherValue2);
                                    planInstance.Publisher = publisherInstance2;
                                }
                                
                                JToken productValue = planValue["product"];
                                if (productValue != null && productValue.Type != JTokenType.Null)
                                {
                                    string productInstance = ((string)productValue);
                                    planInstance.Product = productInstance;
                                }
                                
                                JToken promotionCodeValue = planValue["promotionCode"];
                                if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                {
                                    string promotionCodeInstance = ((string)promotionCodeValue);
                                    planInstance.PromotionCode = promotionCodeInstance;
                                }
                            }
                            
                            JToken propertiesValue3 = responseDoc["properties"];
                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                            {
                                JToken hardwareProfileValue2 = propertiesValue3["hardwareProfile"];
                                if (hardwareProfileValue2 != null && hardwareProfileValue2.Type != JTokenType.Null)
                                {
                                    HardwareProfile hardwareProfileInstance2 = new HardwareProfile();
                                    virtualMachineScaleSetVMInstance.HardwareProfile = hardwareProfileInstance2;
                                    
                                    JToken vmSizeValue2 = hardwareProfileValue2["vmSize"];
                                    if (vmSizeValue2 != null && vmSizeValue2.Type != JTokenType.Null)
                                    {
                                        string vmSizeInstance2 = ((string)vmSizeValue2);
                                        hardwareProfileInstance2.VirtualMachineSize = vmSizeInstance2;
                                    }
                                }
                                
                                JToken storageProfileValue2 = propertiesValue3["storageProfile"];
                                if (storageProfileValue2 != null && storageProfileValue2.Type != JTokenType.Null)
                                {
                                    StorageProfile storageProfileInstance2 = new StorageProfile();
                                    virtualMachineScaleSetVMInstance.StorageProfile = storageProfileInstance2;
                                    
                                    JToken imageReferenceValue2 = storageProfileValue2["imageReference"];
                                    if (imageReferenceValue2 != null && imageReferenceValue2.Type != JTokenType.Null)
                                    {
                                        ImageReference imageReferenceInstance2 = new ImageReference();
                                        storageProfileInstance2.ImageReference = imageReferenceInstance2;
                                        
                                        JToken publisherValue3 = imageReferenceValue2["publisher"];
                                        if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                        {
                                            string publisherInstance3 = ((string)publisherValue3);
                                            imageReferenceInstance2.Publisher = publisherInstance3;
                                        }
                                        
                                        JToken offerValue2 = imageReferenceValue2["offer"];
                                        if (offerValue2 != null && offerValue2.Type != JTokenType.Null)
                                        {
                                            string offerInstance2 = ((string)offerValue2);
                                            imageReferenceInstance2.Offer = offerInstance2;
                                        }
                                        
                                        JToken skuValue3 = imageReferenceValue2["sku"];
                                        if (skuValue3 != null && skuValue3.Type != JTokenType.Null)
                                        {
                                            string skuInstance3 = ((string)skuValue3);
                                            imageReferenceInstance2.Sku = skuInstance3;
                                        }
                                        
                                        JToken versionValue2 = imageReferenceValue2["version"];
                                        if (versionValue2 != null && versionValue2.Type != JTokenType.Null)
                                        {
                                            string versionInstance2 = ((string)versionValue2);
                                            imageReferenceInstance2.Version = versionInstance2;
                                        }
                                    }
                                    
                                    JToken osDiskValue2 = storageProfileValue2["osDisk"];
                                    if (osDiskValue2 != null && osDiskValue2.Type != JTokenType.Null)
                                    {
                                        OSDisk osDiskInstance2 = new OSDisk();
                                        storageProfileInstance2.OSDisk = osDiskInstance2;
                                        
                                        JToken osTypeValue2 = osDiskValue2["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            osDiskInstance2.OperatingSystemType = osTypeInstance2;
                                        }
                                        
                                        JToken nameValue9 = osDiskValue2["name"];
                                        if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                        {
                                            string nameInstance9 = ((string)nameValue9);
                                            osDiskInstance2.Name = nameInstance9;
                                        }
                                        
                                        JToken vhdValue3 = osDiskValue2["vhd"];
                                        if (vhdValue3 != null && vhdValue3.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk vhdInstance3 = new VirtualHardDisk();
                                            osDiskInstance2.VirtualHardDisk = vhdInstance3;
                                            
                                            JToken uriValue5 = vhdValue3["uri"];
                                            if (uriValue5 != null && uriValue5.Type != JTokenType.Null)
                                            {
                                                string uriInstance5 = ((string)uriValue5);
                                                vhdInstance3.Uri = uriInstance5;
                                            }
                                        }
                                        
                                        JToken imageValue3 = osDiskValue2["image"];
                                        if (imageValue3 != null && imageValue3.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk imageInstance3 = new VirtualHardDisk();
                                            osDiskInstance2.SourceImage = imageInstance3;
                                            
                                            JToken uriValue6 = imageValue3["uri"];
                                            if (uriValue6 != null && uriValue6.Type != JTokenType.Null)
                                            {
                                                string uriInstance6 = ((string)uriValue6);
                                                imageInstance3.Uri = uriInstance6;
                                            }
                                        }
                                        
                                        JToken cachingValue3 = osDiskValue2["caching"];
                                        if (cachingValue3 != null && cachingValue3.Type != JTokenType.Null)
                                        {
                                            string cachingInstance3 = ((string)cachingValue3);
                                            osDiskInstance2.Caching = cachingInstance3;
                                        }
                                        
                                        JToken createOptionValue3 = osDiskValue2["createOption"];
                                        if (createOptionValue3 != null && createOptionValue3.Type != JTokenType.Null)
                                        {
                                            string createOptionInstance3 = ((string)createOptionValue3);
                                            osDiskInstance2.CreateOption = createOptionInstance3;
                                        }
                                        
                                        JToken diskSizeGBValue3 = osDiskValue2["diskSizeGB"];
                                        if (diskSizeGBValue3 != null && diskSizeGBValue3.Type != JTokenType.Null)
                                        {
                                            int diskSizeGBInstance3 = ((int)diskSizeGBValue3);
                                            osDiskInstance2.DiskSizeGB = diskSizeGBInstance3;
                                        }
                                    }
                                    
                                    JToken dataDisksArray2 = storageProfileValue2["dataDisks"];
                                    if (dataDisksArray2 != null && dataDisksArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dataDisksValue2 in ((JArray)dataDisksArray2))
                                        {
                                            DataDisk dataDiskInstance2 = new DataDisk();
                                            storageProfileInstance2.DataDisks.Add(dataDiskInstance2);
                                            
                                            JToken lunValue2 = dataDisksValue2["lun"];
                                            if (lunValue2 != null && lunValue2.Type != JTokenType.Null)
                                            {
                                                int lunInstance2 = ((int)lunValue2);
                                                dataDiskInstance2.Lun = lunInstance2;
                                            }
                                            
                                            JToken nameValue10 = dataDisksValue2["name"];
                                            if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                            {
                                                string nameInstance10 = ((string)nameValue10);
                                                dataDiskInstance2.Name = nameInstance10;
                                            }
                                            
                                            JToken vhdValue4 = dataDisksValue2["vhd"];
                                            if (vhdValue4 != null && vhdValue4.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk vhdInstance4 = new VirtualHardDisk();
                                                dataDiskInstance2.VirtualHardDisk = vhdInstance4;
                                                
                                                JToken uriValue7 = vhdValue4["uri"];
                                                if (uriValue7 != null && uriValue7.Type != JTokenType.Null)
                                                {
                                                    string uriInstance7 = ((string)uriValue7);
                                                    vhdInstance4.Uri = uriInstance7;
                                                }
                                            }
                                            
                                            JToken imageValue4 = dataDisksValue2["image"];
                                            if (imageValue4 != null && imageValue4.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance4 = new VirtualHardDisk();
                                                dataDiskInstance2.SourceImage = imageInstance4;
                                                
                                                JToken uriValue8 = imageValue4["uri"];
                                                if (uriValue8 != null && uriValue8.Type != JTokenType.Null)
                                                {
                                                    string uriInstance8 = ((string)uriValue8);
                                                    imageInstance4.Uri = uriInstance8;
                                                }
                                            }
                                            
                                            JToken cachingValue4 = dataDisksValue2["caching"];
                                            if (cachingValue4 != null && cachingValue4.Type != JTokenType.Null)
                                            {
                                                string cachingInstance4 = ((string)cachingValue4);
                                                dataDiskInstance2.Caching = cachingInstance4;
                                            }
                                            
                                            JToken createOptionValue4 = dataDisksValue2["createOption"];
                                            if (createOptionValue4 != null && createOptionValue4.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance4 = ((string)createOptionValue4);
                                                dataDiskInstance2.CreateOption = createOptionInstance4;
                                            }
                                            
                                            JToken diskSizeGBValue4 = dataDisksValue2["diskSizeGB"];
                                            if (diskSizeGBValue4 != null && diskSizeGBValue4.Type != JTokenType.Null)
                                            {
                                                int diskSizeGBInstance4 = ((int)diskSizeGBValue4);
                                                dataDiskInstance2.DiskSizeGB = diskSizeGBInstance4;
                                            }
                                        }
                                    }
                                }
                                
                                JToken osProfileValue2 = propertiesValue3["osProfile"];
                                if (osProfileValue2 != null && osProfileValue2.Type != JTokenType.Null)
                                {
                                    OSProfile osProfileInstance2 = new OSProfile();
                                    virtualMachineScaleSetVMInstance.OSProfile = osProfileInstance2;
                                    
                                    JToken computerNameValue2 = osProfileValue2["computerName"];
                                    if (computerNameValue2 != null && computerNameValue2.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance2 = ((string)computerNameValue2);
                                        osProfileInstance2.ComputerName = computerNameInstance2;
                                    }
                                    
                                    JToken adminUsernameValue2 = osProfileValue2["adminUsername"];
                                    if (adminUsernameValue2 != null && adminUsernameValue2.Type != JTokenType.Null)
                                    {
                                        string adminUsernameInstance2 = ((string)adminUsernameValue2);
                                        osProfileInstance2.AdminUsername = adminUsernameInstance2;
                                    }
                                    
                                    JToken adminPasswordValue2 = osProfileValue2["adminPassword"];
                                    if (adminPasswordValue2 != null && adminPasswordValue2.Type != JTokenType.Null)
                                    {
                                        string adminPasswordInstance2 = ((string)adminPasswordValue2);
                                        osProfileInstance2.AdminPassword = adminPasswordInstance2;
                                    }
                                    
                                    JToken customDataValue2 = osProfileValue2["customData"];
                                    if (customDataValue2 != null && customDataValue2.Type != JTokenType.Null)
                                    {
                                        string customDataInstance2 = ((string)customDataValue2);
                                        osProfileInstance2.CustomData = customDataInstance2;
                                    }
                                    
                                    JToken windowsConfigurationValue2 = osProfileValue2["windowsConfiguration"];
                                    if (windowsConfigurationValue2 != null && windowsConfigurationValue2.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsConfigurationInstance2 = new WindowsConfiguration();
                                        osProfileInstance2.WindowsConfiguration = windowsConfigurationInstance2;
                                        
                                        JToken provisionVMAgentValue2 = windowsConfigurationValue2["provisionVMAgent"];
                                        if (provisionVMAgentValue2 != null && provisionVMAgentValue2.Type != JTokenType.Null)
                                        {
                                            bool provisionVMAgentInstance2 = ((bool)provisionVMAgentValue2);
                                            windowsConfigurationInstance2.ProvisionVMAgent = provisionVMAgentInstance2;
                                        }
                                        
                                        JToken enableAutomaticUpdatesValue2 = windowsConfigurationValue2["enableAutomaticUpdates"];
                                        if (enableAutomaticUpdatesValue2 != null && enableAutomaticUpdatesValue2.Type != JTokenType.Null)
                                        {
                                            bool enableAutomaticUpdatesInstance2 = ((bool)enableAutomaticUpdatesValue2);
                                            windowsConfigurationInstance2.EnableAutomaticUpdates = enableAutomaticUpdatesInstance2;
                                        }
                                        
                                        JToken timeZoneValue2 = windowsConfigurationValue2["timeZone"];
                                        if (timeZoneValue2 != null && timeZoneValue2.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance2 = ((string)timeZoneValue2);
                                            windowsConfigurationInstance2.TimeZone = timeZoneInstance2;
                                        }
                                        
                                        JToken additionalUnattendContentArray2 = windowsConfigurationValue2["additionalUnattendContent"];
                                        if (additionalUnattendContentArray2 != null && additionalUnattendContentArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken additionalUnattendContentValue2 in ((JArray)additionalUnattendContentArray2))
                                            {
                                                AdditionalUnattendContent additionalUnattendContentInstance2 = new AdditionalUnattendContent();
                                                windowsConfigurationInstance2.AdditionalUnattendContents.Add(additionalUnattendContentInstance2);
                                                
                                                JToken passNameValue2 = additionalUnattendContentValue2["passName"];
                                                if (passNameValue2 != null && passNameValue2.Type != JTokenType.Null)
                                                {
                                                    string passNameInstance2 = ((string)passNameValue2);
                                                    additionalUnattendContentInstance2.PassName = passNameInstance2;
                                                }
                                                
                                                JToken componentNameValue2 = additionalUnattendContentValue2["componentName"];
                                                if (componentNameValue2 != null && componentNameValue2.Type != JTokenType.Null)
                                                {
                                                    string componentNameInstance2 = ((string)componentNameValue2);
                                                    additionalUnattendContentInstance2.ComponentName = componentNameInstance2;
                                                }
                                                
                                                JToken settingNameValue2 = additionalUnattendContentValue2["settingName"];
                                                if (settingNameValue2 != null && settingNameValue2.Type != JTokenType.Null)
                                                {
                                                    string settingNameInstance2 = ((string)settingNameValue2);
                                                    additionalUnattendContentInstance2.SettingName = settingNameInstance2;
                                                }
                                                
                                                JToken contentValue2 = additionalUnattendContentValue2["content"];
                                                if (contentValue2 != null && contentValue2.Type != JTokenType.Null)
                                                {
                                                    string contentInstance2 = ((string)contentValue2);
                                                    additionalUnattendContentInstance2.Content = contentInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken winRMValue2 = windowsConfigurationValue2["winRM"];
                                        if (winRMValue2 != null && winRMValue2.Type != JTokenType.Null)
                                        {
                                            WinRMConfiguration winRMInstance2 = new WinRMConfiguration();
                                            windowsConfigurationInstance2.WinRMConfiguration = winRMInstance2;
                                            
                                            JToken listenersArray2 = winRMValue2["listeners"];
                                            if (listenersArray2 != null && listenersArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken listenersValue2 in ((JArray)listenersArray2))
                                                {
                                                    WinRMListener winRMListenerInstance2 = new WinRMListener();
                                                    winRMInstance2.Listeners.Add(winRMListenerInstance2);
                                                    
                                                    JToken protocolValue2 = listenersValue2["protocol"];
                                                    if (protocolValue2 != null && protocolValue2.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance2 = ((string)protocolValue2);
                                                        winRMListenerInstance2.Protocol = protocolInstance2;
                                                    }
                                                    
                                                    JToken certificateUrlValue3 = listenersValue2["certificateUrl"];
                                                    if (certificateUrlValue3 != null && certificateUrlValue3.Type != JTokenType.Null)
                                                    {
                                                        Uri certificateUrlInstance3 = TypeConversion.TryParseUri(((string)certificateUrlValue3));
                                                        winRMListenerInstance2.CertificateUrl = certificateUrlInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken linuxConfigurationValue2 = osProfileValue2["linuxConfiguration"];
                                    if (linuxConfigurationValue2 != null && linuxConfigurationValue2.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxConfigurationInstance2 = new LinuxConfiguration();
                                        osProfileInstance2.LinuxConfiguration = linuxConfigurationInstance2;
                                        
                                        JToken disablePasswordAuthenticationValue2 = linuxConfigurationValue2["disablePasswordAuthentication"];
                                        if (disablePasswordAuthenticationValue2 != null && disablePasswordAuthenticationValue2.Type != JTokenType.Null)
                                        {
                                            bool disablePasswordAuthenticationInstance2 = ((bool)disablePasswordAuthenticationValue2);
                                            linuxConfigurationInstance2.DisablePasswordAuthentication = disablePasswordAuthenticationInstance2;
                                        }
                                        
                                        JToken sshValue2 = linuxConfigurationValue2["ssh"];
                                        if (sshValue2 != null && sshValue2.Type != JTokenType.Null)
                                        {
                                            SshConfiguration sshInstance2 = new SshConfiguration();
                                            linuxConfigurationInstance2.SshConfiguration = sshInstance2;
                                            
                                            JToken publicKeysArray2 = sshValue2["publicKeys"];
                                            if (publicKeysArray2 != null && publicKeysArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken publicKeysValue2 in ((JArray)publicKeysArray2))
                                                {
                                                    SshPublicKey sshPublicKeyInstance2 = new SshPublicKey();
                                                    sshInstance2.PublicKeys.Add(sshPublicKeyInstance2);
                                                    
                                                    JToken pathValue2 = publicKeysValue2["path"];
                                                    if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                    {
                                                        string pathInstance2 = ((string)pathValue2);
                                                        sshPublicKeyInstance2.Path = pathInstance2;
                                                    }
                                                    
                                                    JToken keyDataValue2 = publicKeysValue2["keyData"];
                                                    if (keyDataValue2 != null && keyDataValue2.Type != JTokenType.Null)
                                                    {
                                                        string keyDataInstance2 = ((string)keyDataValue2);
                                                        sshPublicKeyInstance2.KeyData = keyDataInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken secretsArray2 = osProfileValue2["secrets"];
                                    if (secretsArray2 != null && secretsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken secretsValue2 in ((JArray)secretsArray2))
                                        {
                                            VaultSecretGroup vaultSecretGroupInstance2 = new VaultSecretGroup();
                                            osProfileInstance2.Secrets.Add(vaultSecretGroupInstance2);
                                            
                                            JToken sourceVaultValue2 = secretsValue2["sourceVault"];
                                            if (sourceVaultValue2 != null && sourceVaultValue2.Type != JTokenType.Null)
                                            {
                                                SourceVaultReference sourceVaultInstance2 = new SourceVaultReference();
                                                vaultSecretGroupInstance2.SourceVault = sourceVaultInstance2;
                                                
                                                JToken idValue4 = sourceVaultValue2["id"];
                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                {
                                                    string idInstance4 = ((string)idValue4);
                                                    sourceVaultInstance2.ReferenceUri = idInstance4;
                                                }
                                            }
                                            
                                            JToken vaultCertificatesArray2 = secretsValue2["vaultCertificates"];
                                            if (vaultCertificatesArray2 != null && vaultCertificatesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vaultCertificatesValue2 in ((JArray)vaultCertificatesArray2))
                                                {
                                                    VaultCertificate vaultCertificateInstance2 = new VaultCertificate();
                                                    vaultSecretGroupInstance2.VaultCertificates.Add(vaultCertificateInstance2);
                                                    
                                                    JToken certificateUrlValue4 = vaultCertificatesValue2["certificateUrl"];
                                                    if (certificateUrlValue4 != null && certificateUrlValue4.Type != JTokenType.Null)
                                                    {
                                                        string certificateUrlInstance4 = ((string)certificateUrlValue4);
                                                        vaultCertificateInstance2.CertificateUrl = certificateUrlInstance4;
                                                    }
                                                    
                                                    JToken certificateStoreValue2 = vaultCertificatesValue2["certificateStore"];
                                                    if (certificateStoreValue2 != null && certificateStoreValue2.Type != JTokenType.Null)
                                                    {
                                                        string certificateStoreInstance2 = ((string)certificateStoreValue2);
                                                        vaultCertificateInstance2.CertificateStore = certificateStoreInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken networkProfileValue2 = propertiesValue3["networkProfile"];
                                if (networkProfileValue2 != null && networkProfileValue2.Type != JTokenType.Null)
                                {
                                    NetworkProfile networkProfileInstance2 = new NetworkProfile();
                                    virtualMachineScaleSetVMInstance.NetworkProfile = networkProfileInstance2;
                                    
                                    JToken networkInterfacesArray2 = networkProfileValue2["networkInterfaces"];
                                    if (networkInterfacesArray2 != null && networkInterfacesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken networkInterfacesValue2 in ((JArray)networkInterfacesArray2))
                                        {
                                            NetworkInterfaceReference networkInterfaceReferenceJsonInstance2 = new NetworkInterfaceReference();
                                            networkProfileInstance2.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance2);
                                            
                                            JToken propertiesValue4 = networkInterfacesValue2["properties"];
                                            if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                            {
                                                JToken primaryValue2 = propertiesValue4["primary"];
                                                if (primaryValue2 != null && primaryValue2.Type != JTokenType.Null)
                                                {
                                                    bool primaryInstance2 = ((bool)primaryValue2);
                                                    networkInterfaceReferenceJsonInstance2.Primary = primaryInstance2;
                                                }
                                            }
                                            
                                            JToken idValue5 = networkInterfacesValue2["id"];
                                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                            {
                                                string idInstance5 = ((string)idValue5);
                                                networkInterfaceReferenceJsonInstance2.ReferenceUri = idInstance5;
                                            }
                                        }
                                    }
                                }
                                
                                JToken diagnosticsProfileValue2 = propertiesValue3["diagnosticsProfile"];
                                if (diagnosticsProfileValue2 != null && diagnosticsProfileValue2.Type != JTokenType.Null)
                                {
                                    DiagnosticsProfile diagnosticsProfileInstance2 = new DiagnosticsProfile();
                                    virtualMachineScaleSetVMInstance.DiagnosticsProfile = diagnosticsProfileInstance2;
                                    
                                    JToken bootDiagnosticsValue4 = diagnosticsProfileValue2["bootDiagnostics"];
                                    if (bootDiagnosticsValue4 != null && bootDiagnosticsValue4.Type != JTokenType.Null)
                                    {
                                        BootDiagnostics bootDiagnosticsInstance4 = new BootDiagnostics();
                                        diagnosticsProfileInstance2.BootDiagnostics = bootDiagnosticsInstance4;
                                        
                                        JToken enabledValue2 = bootDiagnosticsValue4["enabled"];
                                        if (enabledValue2 != null && enabledValue2.Type != JTokenType.Null)
                                        {
                                            bool enabledInstance2 = ((bool)enabledValue2);
                                            bootDiagnosticsInstance4.Enabled = enabledInstance2;
                                        }
                                        
                                        JToken storageUriValue2 = bootDiagnosticsValue4["storageUri"];
                                        if (storageUriValue2 != null && storageUriValue2.Type != JTokenType.Null)
                                        {
                                            Uri storageUriInstance2 = TypeConversion.TryParseUri(((string)storageUriValue2));
                                            bootDiagnosticsInstance4.StorageUri = storageUriInstance2;
                                        }
                                    }
                                }
                                
                                JToken availabilitySetValue2 = propertiesValue3["availabilitySet"];
                                if (availabilitySetValue2 != null && availabilitySetValue2.Type != JTokenType.Null)
                                {
                                    AvailabilitySetReference availabilitySetInstance2 = new AvailabilitySetReference();
                                    virtualMachineScaleSetVMInstance.AvailabilitySetReference = availabilitySetInstance2;
                                    
                                    JToken idValue6 = availabilitySetValue2["id"];
                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                    {
                                        string idInstance6 = ((string)idValue6);
                                        availabilitySetInstance2.ReferenceUri = idInstance6;
                                    }
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    virtualMachineScaleSetVMInstance.ProvisioningState = provisioningStateInstance2;
                                }
                                
                                JToken instanceViewValue3 = propertiesValue3["instanceView"];
                                if (instanceViewValue3 != null && instanceViewValue3.Type != JTokenType.Null)
                                {
                                    VirtualMachineInstanceView instanceViewInstance3 = new VirtualMachineInstanceView();
                                    virtualMachineScaleSetVMInstance.InstanceView = instanceViewInstance3;
                                    
                                    JToken platformUpdateDomainValue3 = instanceViewValue3["platformUpdateDomain"];
                                    if (platformUpdateDomainValue3 != null && platformUpdateDomainValue3.Type != JTokenType.Null)
                                    {
                                        int platformUpdateDomainInstance3 = ((int)platformUpdateDomainValue3);
                                        instanceViewInstance3.PlatformUpdateDomain = platformUpdateDomainInstance3;
                                    }
                                    
                                    JToken platformFaultDomainValue3 = instanceViewValue3["platformFaultDomain"];
                                    if (platformFaultDomainValue3 != null && platformFaultDomainValue3.Type != JTokenType.Null)
                                    {
                                        int platformFaultDomainInstance3 = ((int)platformFaultDomainValue3);
                                        instanceViewInstance3.PlatformFaultDomain = platformFaultDomainInstance3;
                                    }
                                    
                                    JToken rdpThumbPrintValue3 = instanceViewValue3["rdpThumbPrint"];
                                    if (rdpThumbPrintValue3 != null && rdpThumbPrintValue3.Type != JTokenType.Null)
                                    {
                                        string rdpThumbPrintInstance3 = ((string)rdpThumbPrintValue3);
                                        instanceViewInstance3.RemoteDesktopThumbprint = rdpThumbPrintInstance3;
                                    }
                                    
                                    JToken vmAgentValue3 = instanceViewValue3["vmAgent"];
                                    if (vmAgentValue3 != null && vmAgentValue3.Type != JTokenType.Null)
                                    {
                                        VirtualMachineAgentInstanceView vmAgentInstance3 = new VirtualMachineAgentInstanceView();
                                        instanceViewInstance3.VMAgent = vmAgentInstance3;
                                        
                                        JToken vmAgentVersionValue3 = vmAgentValue3["vmAgentVersion"];
                                        if (vmAgentVersionValue3 != null && vmAgentVersionValue3.Type != JTokenType.Null)
                                        {
                                            string vmAgentVersionInstance3 = ((string)vmAgentVersionValue3);
                                            vmAgentInstance3.VMAgentVersion = vmAgentVersionInstance3;
                                        }
                                        
                                        JToken extensionHandlersArray3 = vmAgentValue3["extensionHandlers"];
                                        if (extensionHandlersArray3 != null && extensionHandlersArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken extensionHandlersValue3 in ((JArray)extensionHandlersArray3))
                                            {
                                                VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance3 = new VirtualMachineExtensionHandlerInstanceView();
                                                vmAgentInstance3.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance3);
                                                
                                                JToken typeValue5 = extensionHandlersValue3["type"];
                                                if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                                {
                                                    string typeInstance5 = ((string)typeValue5);
                                                    virtualMachineExtensionHandlerInstanceViewInstance3.Type = typeInstance5;
                                                }
                                                
                                                JToken typeHandlerVersionValue5 = extensionHandlersValue3["typeHandlerVersion"];
                                                if (typeHandlerVersionValue5 != null && typeHandlerVersionValue5.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance5 = ((string)typeHandlerVersionValue5);
                                                    virtualMachineExtensionHandlerInstanceViewInstance3.TypeHandlerVersion = typeHandlerVersionInstance5;
                                                }
                                                
                                                JToken statusValue3 = extensionHandlersValue3["status"];
                                                if (statusValue3 != null && statusValue3.Type != JTokenType.Null)
                                                {
                                                    InstanceViewStatus statusInstance3 = new InstanceViewStatus();
                                                    virtualMachineExtensionHandlerInstanceViewInstance3.Status = statusInstance3;
                                                    
                                                    JToken codeValue13 = statusValue3["code"];
                                                    if (codeValue13 != null && codeValue13.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance13 = ((string)codeValue13);
                                                        statusInstance3.Code = codeInstance13;
                                                    }
                                                    
                                                    JToken levelValue13 = statusValue3["level"];
                                                    if (levelValue13 != null && levelValue13.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance13 = ((string)levelValue13);
                                                        statusInstance3.Level = levelInstance13;
                                                    }
                                                    
                                                    JToken displayStatusValue13 = statusValue3["displayStatus"];
                                                    if (displayStatusValue13 != null && displayStatusValue13.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance13 = ((string)displayStatusValue13);
                                                        statusInstance3.DisplayStatus = displayStatusInstance13;
                                                    }
                                                    
                                                    JToken messageValue13 = statusValue3["message"];
                                                    if (messageValue13 != null && messageValue13.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance13 = ((string)messageValue13);
                                                        statusInstance3.Message = messageInstance13;
                                                    }
                                                    
                                                    JToken timeValue13 = statusValue3["time"];
                                                    if (timeValue13 != null && timeValue13.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance13 = ((DateTimeOffset)timeValue13);
                                                        statusInstance3.Time = timeInstance13;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray9 = vmAgentValue3["statuses"];
                                        if (statusesArray9 != null && statusesArray9.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue9 in ((JArray)statusesArray9))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance11 = new InstanceViewStatus();
                                                vmAgentInstance3.Statuses.Add(instanceViewStatusInstance11);
                                                
                                                JToken codeValue14 = statusesValue9["code"];
                                                if (codeValue14 != null && codeValue14.Type != JTokenType.Null)
                                                {
                                                    string codeInstance14 = ((string)codeValue14);
                                                    instanceViewStatusInstance11.Code = codeInstance14;
                                                }
                                                
                                                JToken levelValue14 = statusesValue9["level"];
                                                if (levelValue14 != null && levelValue14.Type != JTokenType.Null)
                                                {
                                                    string levelInstance14 = ((string)levelValue14);
                                                    instanceViewStatusInstance11.Level = levelInstance14;
                                                }
                                                
                                                JToken displayStatusValue14 = statusesValue9["displayStatus"];
                                                if (displayStatusValue14 != null && displayStatusValue14.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance14 = ((string)displayStatusValue14);
                                                    instanceViewStatusInstance11.DisplayStatus = displayStatusInstance14;
                                                }
                                                
                                                JToken messageValue14 = statusesValue9["message"];
                                                if (messageValue14 != null && messageValue14.Type != JTokenType.Null)
                                                {
                                                    string messageInstance14 = ((string)messageValue14);
                                                    instanceViewStatusInstance11.Message = messageInstance14;
                                                }
                                                
                                                JToken timeValue14 = statusesValue9["time"];
                                                if (timeValue14 != null && timeValue14.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance14 = ((DateTimeOffset)timeValue14);
                                                    instanceViewStatusInstance11.Time = timeInstance14;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken disksArray3 = instanceViewValue3["disks"];
                                    if (disksArray3 != null && disksArray3.Type != JTokenType.Null)
                                    {
                                        foreach (JToken disksValue3 in ((JArray)disksArray3))
                                        {
                                            DiskInstanceView diskInstanceViewInstance3 = new DiskInstanceView();
                                            instanceViewInstance3.Disks.Add(diskInstanceViewInstance3);
                                            
                                            JToken nameValue11 = disksValue3["name"];
                                            if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                            {
                                                string nameInstance11 = ((string)nameValue11);
                                                diskInstanceViewInstance3.Name = nameInstance11;
                                            }
                                            
                                            JToken statusesArray10 = disksValue3["statuses"];
                                            if (statusesArray10 != null && statusesArray10.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue10 in ((JArray)statusesArray10))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance12 = new InstanceViewStatus();
                                                    diskInstanceViewInstance3.Statuses.Add(instanceViewStatusInstance12);
                                                    
                                                    JToken codeValue15 = statusesValue10["code"];
                                                    if (codeValue15 != null && codeValue15.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance15 = ((string)codeValue15);
                                                        instanceViewStatusInstance12.Code = codeInstance15;
                                                    }
                                                    
                                                    JToken levelValue15 = statusesValue10["level"];
                                                    if (levelValue15 != null && levelValue15.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance15 = ((string)levelValue15);
                                                        instanceViewStatusInstance12.Level = levelInstance15;
                                                    }
                                                    
                                                    JToken displayStatusValue15 = statusesValue10["displayStatus"];
                                                    if (displayStatusValue15 != null && displayStatusValue15.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance15 = ((string)displayStatusValue15);
                                                        instanceViewStatusInstance12.DisplayStatus = displayStatusInstance15;
                                                    }
                                                    
                                                    JToken messageValue15 = statusesValue10["message"];
                                                    if (messageValue15 != null && messageValue15.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance15 = ((string)messageValue15);
                                                        instanceViewStatusInstance12.Message = messageInstance15;
                                                    }
                                                    
                                                    JToken timeValue15 = statusesValue10["time"];
                                                    if (timeValue15 != null && timeValue15.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance15 = ((DateTimeOffset)timeValue15);
                                                        instanceViewStatusInstance12.Time = timeInstance15;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionsArray3 = instanceViewValue3["extensions"];
                                    if (extensionsArray3 != null && extensionsArray3.Type != JTokenType.Null)
                                    {
                                        foreach (JToken extensionsValue3 in ((JArray)extensionsArray3))
                                        {
                                            VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance3 = new VirtualMachineExtensionInstanceView();
                                            instanceViewInstance3.Extensions.Add(virtualMachineExtensionInstanceViewInstance3);
                                            
                                            JToken nameValue12 = extensionsValue3["name"];
                                            if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                            {
                                                string nameInstance12 = ((string)nameValue12);
                                                virtualMachineExtensionInstanceViewInstance3.Name = nameInstance12;
                                            }
                                            
                                            JToken typeValue6 = extensionsValue3["type"];
                                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                            {
                                                string typeInstance6 = ((string)typeValue6);
                                                virtualMachineExtensionInstanceViewInstance3.ExtensionType = typeInstance6;
                                            }
                                            
                                            JToken typeHandlerVersionValue6 = extensionsValue3["typeHandlerVersion"];
                                            if (typeHandlerVersionValue6 != null && typeHandlerVersionValue6.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance6 = ((string)typeHandlerVersionValue6);
                                                virtualMachineExtensionInstanceViewInstance3.TypeHandlerVersion = typeHandlerVersionInstance6;
                                            }
                                            
                                            JToken substatusesArray3 = extensionsValue3["substatuses"];
                                            if (substatusesArray3 != null && substatusesArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue3 in ((JArray)substatusesArray3))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance13 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance3.SubStatuses.Add(instanceViewStatusInstance13);
                                                    
                                                    JToken codeValue16 = substatusesValue3["code"];
                                                    if (codeValue16 != null && codeValue16.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance16 = ((string)codeValue16);
                                                        instanceViewStatusInstance13.Code = codeInstance16;
                                                    }
                                                    
                                                    JToken levelValue16 = substatusesValue3["level"];
                                                    if (levelValue16 != null && levelValue16.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance16 = ((string)levelValue16);
                                                        instanceViewStatusInstance13.Level = levelInstance16;
                                                    }
                                                    
                                                    JToken displayStatusValue16 = substatusesValue3["displayStatus"];
                                                    if (displayStatusValue16 != null && displayStatusValue16.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance16 = ((string)displayStatusValue16);
                                                        instanceViewStatusInstance13.DisplayStatus = displayStatusInstance16;
                                                    }
                                                    
                                                    JToken messageValue16 = substatusesValue3["message"];
                                                    if (messageValue16 != null && messageValue16.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance16 = ((string)messageValue16);
                                                        instanceViewStatusInstance13.Message = messageInstance16;
                                                    }
                                                    
                                                    JToken timeValue16 = substatusesValue3["time"];
                                                    if (timeValue16 != null && timeValue16.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance16 = ((DateTimeOffset)timeValue16);
                                                        instanceViewStatusInstance13.Time = timeInstance16;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray11 = extensionsValue3["statuses"];
                                            if (statusesArray11 != null && statusesArray11.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue11 in ((JArray)statusesArray11))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance14 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance3.Statuses.Add(instanceViewStatusInstance14);
                                                    
                                                    JToken codeValue17 = statusesValue11["code"];
                                                    if (codeValue17 != null && codeValue17.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance17 = ((string)codeValue17);
                                                        instanceViewStatusInstance14.Code = codeInstance17;
                                                    }
                                                    
                                                    JToken levelValue17 = statusesValue11["level"];
                                                    if (levelValue17 != null && levelValue17.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance17 = ((string)levelValue17);
                                                        instanceViewStatusInstance14.Level = levelInstance17;
                                                    }
                                                    
                                                    JToken displayStatusValue17 = statusesValue11["displayStatus"];
                                                    if (displayStatusValue17 != null && displayStatusValue17.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance17 = ((string)displayStatusValue17);
                                                        instanceViewStatusInstance14.DisplayStatus = displayStatusInstance17;
                                                    }
                                                    
                                                    JToken messageValue17 = statusesValue11["message"];
                                                    if (messageValue17 != null && messageValue17.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance17 = ((string)messageValue17);
                                                        instanceViewStatusInstance14.Message = messageInstance17;
                                                    }
                                                    
                                                    JToken timeValue17 = statusesValue11["time"];
                                                    if (timeValue17 != null && timeValue17.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance17 = ((DateTimeOffset)timeValue17);
                                                        instanceViewStatusInstance14.Time = timeInstance17;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken bootDiagnosticsValue5 = instanceViewValue3["bootDiagnostics"];
                                    if (bootDiagnosticsValue5 != null && bootDiagnosticsValue5.Type != JTokenType.Null)
                                    {
                                        BootDiagnosticsInstanceView bootDiagnosticsInstance5 = new BootDiagnosticsInstanceView();
                                        instanceViewInstance3.BootDiagnostics = bootDiagnosticsInstance5;
                                        
                                        JToken consoleScreenshotBlobUriValue3 = bootDiagnosticsValue5["consoleScreenshotBlobUri"];
                                        if (consoleScreenshotBlobUriValue3 != null && consoleScreenshotBlobUriValue3.Type != JTokenType.Null)
                                        {
                                            Uri consoleScreenshotBlobUriInstance3 = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue3));
                                            bootDiagnosticsInstance5.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance3;
                                        }
                                        
                                        JToken serialConsoleLogBlobUriValue3 = bootDiagnosticsValue5["serialConsoleLogBlobUri"];
                                        if (serialConsoleLogBlobUriValue3 != null && serialConsoleLogBlobUriValue3.Type != JTokenType.Null)
                                        {
                                            Uri serialConsoleLogBlobUriInstance3 = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue3));
                                            bootDiagnosticsInstance5.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance3;
                                        }
                                    }
                                    
                                    JToken statusesArray12 = instanceViewValue3["statuses"];
                                    if (statusesArray12 != null && statusesArray12.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue12 in ((JArray)statusesArray12))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance15 = new InstanceViewStatus();
                                            instanceViewInstance3.Statuses.Add(instanceViewStatusInstance15);
                                            
                                            JToken codeValue18 = statusesValue12["code"];
                                            if (codeValue18 != null && codeValue18.Type != JTokenType.Null)
                                            {
                                                string codeInstance18 = ((string)codeValue18);
                                                instanceViewStatusInstance15.Code = codeInstance18;
                                            }
                                            
                                            JToken levelValue18 = statusesValue12["level"];
                                            if (levelValue18 != null && levelValue18.Type != JTokenType.Null)
                                            {
                                                string levelInstance18 = ((string)levelValue18);
                                                instanceViewStatusInstance15.Level = levelInstance18;
                                            }
                                            
                                            JToken displayStatusValue18 = statusesValue12["displayStatus"];
                                            if (displayStatusValue18 != null && displayStatusValue18.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance18 = ((string)displayStatusValue18);
                                                instanceViewStatusInstance15.DisplayStatus = displayStatusInstance18;
                                            }
                                            
                                            JToken messageValue18 = statusesValue12["message"];
                                            if (messageValue18 != null && messageValue18.Type != JTokenType.Null)
                                            {
                                                string messageInstance18 = ((string)messageValue18);
                                                instanceViewStatusInstance15.Message = messageInstance18;
                                            }
                                            
                                            JToken timeValue18 = statusesValue12["time"];
                                            if (timeValue18 != null && timeValue18.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance18 = ((DateTimeOffset)timeValue18);
                                                instanceViewStatusInstance15.Time = timeInstance18;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken resourcesArray = responseDoc["resources"];
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                virtualMachineScaleSetVMInstance.Extensions = new List<VirtualMachineExtension>();
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                    virtualMachineScaleSetVMInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                    
                                    JToken propertiesValue5 = resourcesValue["properties"];
                                    if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                    {
                                        JToken publisherValue4 = propertiesValue5["publisher"];
                                        if (publisherValue4 != null && publisherValue4.Type != JTokenType.Null)
                                        {
                                            string publisherInstance4 = ((string)publisherValue4);
                                            virtualMachineExtensionJsonInstance.Publisher = publisherInstance4;
                                        }
                                        
                                        JToken typeValue7 = propertiesValue5["type"];
                                        if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                        {
                                            string typeInstance7 = ((string)typeValue7);
                                            virtualMachineExtensionJsonInstance.ExtensionType = typeInstance7;
                                        }
                                        
                                        JToken typeHandlerVersionValue7 = propertiesValue5["typeHandlerVersion"];
                                        if (typeHandlerVersionValue7 != null && typeHandlerVersionValue7.Type != JTokenType.Null)
                                        {
                                            string typeHandlerVersionInstance7 = ((string)typeHandlerVersionValue7);
                                            virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance7;
                                        }
                                        
                                        JToken autoUpgradeMinorVersionValue = propertiesValue5["autoUpgradeMinorVersion"];
                                        if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                        {
                                            bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                            virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                        }
                                        
                                        JToken settingsValue = propertiesValue5["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                        }
                                        
                                        JToken protectedSettingsValue = propertiesValue5["protectedSettings"];
                                        if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                        {
                                            string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                        }
                                        
                                        JToken provisioningStateValue3 = propertiesValue5["provisioningState"];
                                        if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                            virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance3;
                                        }
                                        
                                        JToken instanceViewValue4 = propertiesValue5["instanceView"];
                                        if (instanceViewValue4 != null && instanceViewValue4.Type != JTokenType.Null)
                                        {
                                            VirtualMachineExtensionInstanceView instanceViewInstance4 = new VirtualMachineExtensionInstanceView();
                                            virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance4;
                                            
                                            JToken nameValue13 = instanceViewValue4["name"];
                                            if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                            {
                                                string nameInstance13 = ((string)nameValue13);
                                                instanceViewInstance4.Name = nameInstance13;
                                            }
                                            
                                            JToken typeValue8 = instanceViewValue4["type"];
                                            if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                            {
                                                string typeInstance8 = ((string)typeValue8);
                                                instanceViewInstance4.ExtensionType = typeInstance8;
                                            }
                                            
                                            JToken typeHandlerVersionValue8 = instanceViewValue4["typeHandlerVersion"];
                                            if (typeHandlerVersionValue8 != null && typeHandlerVersionValue8.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance8 = ((string)typeHandlerVersionValue8);
                                                instanceViewInstance4.TypeHandlerVersion = typeHandlerVersionInstance8;
                                            }
                                            
                                            JToken substatusesArray4 = instanceViewValue4["substatuses"];
                                            if (substatusesArray4 != null && substatusesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue4 in ((JArray)substatusesArray4))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance16 = new InstanceViewStatus();
                                                    instanceViewInstance4.SubStatuses.Add(instanceViewStatusInstance16);
                                                    
                                                    JToken codeValue19 = substatusesValue4["code"];
                                                    if (codeValue19 != null && codeValue19.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance19 = ((string)codeValue19);
                                                        instanceViewStatusInstance16.Code = codeInstance19;
                                                    }
                                                    
                                                    JToken levelValue19 = substatusesValue4["level"];
                                                    if (levelValue19 != null && levelValue19.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance19 = ((string)levelValue19);
                                                        instanceViewStatusInstance16.Level = levelInstance19;
                                                    }
                                                    
                                                    JToken displayStatusValue19 = substatusesValue4["displayStatus"];
                                                    if (displayStatusValue19 != null && displayStatusValue19.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance19 = ((string)displayStatusValue19);
                                                        instanceViewStatusInstance16.DisplayStatus = displayStatusInstance19;
                                                    }
                                                    
                                                    JToken messageValue19 = substatusesValue4["message"];
                                                    if (messageValue19 != null && messageValue19.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance19 = ((string)messageValue19);
                                                        instanceViewStatusInstance16.Message = messageInstance19;
                                                    }
                                                    
                                                    JToken timeValue19 = substatusesValue4["time"];
                                                    if (timeValue19 != null && timeValue19.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance19 = ((DateTimeOffset)timeValue19);
                                                        instanceViewStatusInstance16.Time = timeInstance19;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray13 = instanceViewValue4["statuses"];
                                            if (statusesArray13 != null && statusesArray13.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue13 in ((JArray)statusesArray13))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance17 = new InstanceViewStatus();
                                                    instanceViewInstance4.Statuses.Add(instanceViewStatusInstance17);
                                                    
                                                    JToken codeValue20 = statusesValue13["code"];
                                                    if (codeValue20 != null && codeValue20.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance20 = ((string)codeValue20);
                                                        instanceViewStatusInstance17.Code = codeInstance20;
                                                    }
                                                    
                                                    JToken levelValue20 = statusesValue13["level"];
                                                    if (levelValue20 != null && levelValue20.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance20 = ((string)levelValue20);
                                                        instanceViewStatusInstance17.Level = levelInstance20;
                                                    }
                                                    
                                                    JToken displayStatusValue20 = statusesValue13["displayStatus"];
                                                    if (displayStatusValue20 != null && displayStatusValue20.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance20 = ((string)displayStatusValue20);
                                                        instanceViewStatusInstance17.DisplayStatus = displayStatusInstance20;
                                                    }
                                                    
                                                    JToken messageValue20 = statusesValue13["message"];
                                                    if (messageValue20 != null && messageValue20.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance20 = ((string)messageValue20);
                                                        instanceViewStatusInstance17.Message = messageInstance20;
                                                    }
                                                    
                                                    JToken timeValue20 = statusesValue13["time"];
                                                    if (timeValue20 != null && timeValue20.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance20 = ((DateTimeOffset)timeValue20);
                                                        instanceViewStatusInstance17.Time = timeInstance20;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue7 = resourcesValue["id"];
                                    if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                    {
                                        string idInstance7 = ((string)idValue7);
                                        virtualMachineExtensionJsonInstance.Id = idInstance7;
                                    }
                                    
                                    JToken nameValue14 = resourcesValue["name"];
                                    if (nameValue14 != null && nameValue14.Type != JTokenType.Null)
                                    {
                                        string nameInstance14 = ((string)nameValue14);
                                        virtualMachineExtensionJsonInstance.Name = nameInstance14;
                                    }
                                    
                                    JToken typeValue9 = resourcesValue["type"];
                                    if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                    {
                                        string typeInstance9 = ((string)typeValue9);
                                        virtualMachineExtensionJsonInstance.Type = typeInstance9;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineExtensionJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue8 = responseDoc["id"];
                            if (idValue8 != null && idValue8.Type != JTokenType.Null)
                            {
                                string idInstance8 = ((string)idValue8);
                                virtualMachineScaleSetVMInstance.Id = idInstance8;
                            }
                            
                            JToken nameValue15 = responseDoc["name"];
                            if (nameValue15 != null && nameValue15.Type != JTokenType.Null)
                            {
                                string nameInstance15 = ((string)nameValue15);
                                virtualMachineScaleSetVMInstance.Name = nameInstance15;
                            }
                            
                            JToken typeValue10 = responseDoc["type"];
                            if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                            {
                                string typeInstance10 = ((string)typeValue10);
                                virtualMachineScaleSetVMInstance.Type = typeInstance10;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                virtualMachineScaleSetVMInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    virtualMachineScaleSetVMInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get a virtual machine scale set virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get VirtualMachineScaleSetVM instance view operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetVMGetInstanceViewResponse> GetInstanceViewAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmScaleSetName == null)
            {
                throw new ArgumentNullException("vmScaleSetName");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetInstanceViewAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            url = url + Uri.EscapeDataString(vmScaleSetName);
            url = url + "/virtualmachines/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/instanceView";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetVMGetInstanceViewResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetVMGetInstanceViewResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineScaleSetVMInstanceView virtualMachineScaleSetVMInstanceViewInstance = new VirtualMachineScaleSetVMInstanceView();
                            result.VirtualMachineScaleSetVMInstanceView = virtualMachineScaleSetVMInstanceViewInstance;
                            
                            JToken platformUpdateDomainValue = responseDoc["platformUpdateDomain"];
                            if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                            {
                                int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                virtualMachineScaleSetVMInstanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                            }
                            
                            JToken platformFaultDomainValue = responseDoc["platformFaultDomain"];
                            if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                            {
                                int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                virtualMachineScaleSetVMInstanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                            }
                            
                            JToken rdpThumbPrintValue = responseDoc["rdpThumbPrint"];
                            if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                            {
                                string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                virtualMachineScaleSetVMInstanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                            }
                            
                            JToken vmAgentValue = responseDoc["vmAgent"];
                            if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                            {
                                VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                virtualMachineScaleSetVMInstanceViewInstance.VMAgent = vmAgentInstance;
                                
                                JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                {
                                    string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                    vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                }
                                
                                JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                    {
                                        VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                        vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                        
                                        JToken typeValue = extensionHandlersValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                        }
                                        
                                        JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                        if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                        {
                                            string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                            virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                        }
                                        
                                        JToken statusValue = extensionHandlersValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            InstanceViewStatus statusInstance = new InstanceViewStatus();
                                            virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                            
                                            JToken codeValue = statusValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                statusInstance.Code = codeInstance;
                                            }
                                            
                                            JToken levelValue = statusValue["level"];
                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                            {
                                                string levelInstance = ((string)levelValue);
                                                statusInstance.Level = levelInstance;
                                            }
                                            
                                            JToken displayStatusValue = statusValue["displayStatus"];
                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance = ((string)displayStatusValue);
                                                statusInstance.DisplayStatus = displayStatusInstance;
                                            }
                                            
                                            JToken messageValue = statusValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                statusInstance.Message = messageInstance;
                                            }
                                            
                                            JToken timeValue = statusValue["time"];
                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                statusInstance.Time = timeInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken statusesArray = vmAgentValue["statuses"];
                                if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken statusesValue in ((JArray)statusesArray))
                                    {
                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                        vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                        
                                        JToken codeValue2 = statusesValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            instanceViewStatusInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken levelValue2 = statusesValue["level"];
                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                        {
                                            string levelInstance2 = ((string)levelValue2);
                                            instanceViewStatusInstance.Level = levelInstance2;
                                        }
                                        
                                        JToken displayStatusValue2 = statusesValue["displayStatus"];
                                        if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                        {
                                            string displayStatusInstance2 = ((string)displayStatusValue2);
                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                        }
                                        
                                        JToken messageValue2 = statusesValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            instanceViewStatusInstance.Message = messageInstance2;
                                        }
                                        
                                        JToken timeValue2 = statusesValue["time"];
                                        if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                            instanceViewStatusInstance.Time = timeInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken disksArray = responseDoc["disks"];
                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                            {
                                foreach (JToken disksValue in ((JArray)disksArray))
                                {
                                    DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                    virtualMachineScaleSetVMInstanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                    
                                    JToken nameValue = disksValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        diskInstanceViewInstance.Name = nameInstance;
                                    }
                                    
                                    JToken statusesArray2 = disksValue["statuses"];
                                    if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                            diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                            
                                            JToken codeValue3 = statusesValue2["code"];
                                            if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                            {
                                                string codeInstance3 = ((string)codeValue3);
                                                instanceViewStatusInstance2.Code = codeInstance3;
                                            }
                                            
                                            JToken levelValue3 = statusesValue2["level"];
                                            if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                            {
                                                string levelInstance3 = ((string)levelValue3);
                                                instanceViewStatusInstance2.Level = levelInstance3;
                                            }
                                            
                                            JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                            if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance3 = ((string)displayStatusValue3);
                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                            }
                                            
                                            JToken messageValue3 = statusesValue2["message"];
                                            if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                            {
                                                string messageInstance3 = ((string)messageValue3);
                                                instanceViewStatusInstance2.Message = messageInstance3;
                                            }
                                            
                                            JToken timeValue3 = statusesValue2["time"];
                                            if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                instanceViewStatusInstance2.Time = timeInstance3;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken extensionsArray = responseDoc["extensions"];
                            if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                {
                                    VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                    virtualMachineScaleSetVMInstanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                    
                                    JToken nameValue2 = extensionsValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        virtualMachineExtensionInstanceViewInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue2 = extensionsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                    }
                                    
                                    JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                    {
                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                        virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                    }
                                    
                                    JToken substatusesArray = extensionsValue["substatuses"];
                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                            virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                            
                                            JToken codeValue4 = substatusesValue["code"];
                                            if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                            {
                                                string codeInstance4 = ((string)codeValue4);
                                                instanceViewStatusInstance3.Code = codeInstance4;
                                            }
                                            
                                            JToken levelValue4 = substatusesValue["level"];
                                            if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                            {
                                                string levelInstance4 = ((string)levelValue4);
                                                instanceViewStatusInstance3.Level = levelInstance4;
                                            }
                                            
                                            JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                            if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance4 = ((string)displayStatusValue4);
                                                instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                            }
                                            
                                            JToken messageValue4 = substatusesValue["message"];
                                            if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                            {
                                                string messageInstance4 = ((string)messageValue4);
                                                instanceViewStatusInstance3.Message = messageInstance4;
                                            }
                                            
                                            JToken timeValue4 = substatusesValue["time"];
                                            if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                instanceViewStatusInstance3.Time = timeInstance4;
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray3 = extensionsValue["statuses"];
                                    if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                            virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                            
                                            JToken codeValue5 = statusesValue3["code"];
                                            if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                            {
                                                string codeInstance5 = ((string)codeValue5);
                                                instanceViewStatusInstance4.Code = codeInstance5;
                                            }
                                            
                                            JToken levelValue5 = statusesValue3["level"];
                                            if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                            {
                                                string levelInstance5 = ((string)levelValue5);
                                                instanceViewStatusInstance4.Level = levelInstance5;
                                            }
                                            
                                            JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                            if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance5 = ((string)displayStatusValue5);
                                                instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                            }
                                            
                                            JToken messageValue5 = statusesValue3["message"];
                                            if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                            {
                                                string messageInstance5 = ((string)messageValue5);
                                                instanceViewStatusInstance4.Message = messageInstance5;
                                            }
                                            
                                            JToken timeValue5 = statusesValue3["time"];
                                            if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                instanceViewStatusInstance4.Time = timeInstance5;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken bootDiagnosticsValue = responseDoc["bootDiagnostics"];
                            if (bootDiagnosticsValue != null && bootDiagnosticsValue.Type != JTokenType.Null)
                            {
                                BootDiagnosticsInstanceView bootDiagnosticsInstance = new BootDiagnosticsInstanceView();
                                virtualMachineScaleSetVMInstanceViewInstance.BootDiagnostics = bootDiagnosticsInstance;
                                
                                JToken consoleScreenshotBlobUriValue = bootDiagnosticsValue["consoleScreenshotBlobUri"];
                                if (consoleScreenshotBlobUriValue != null && consoleScreenshotBlobUriValue.Type != JTokenType.Null)
                                {
                                    Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue));
                                    bootDiagnosticsInstance.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                }
                                
                                JToken serialConsoleLogBlobUriValue = bootDiagnosticsValue["serialConsoleLogBlobUri"];
                                if (serialConsoleLogBlobUriValue != null && serialConsoleLogBlobUriValue.Type != JTokenType.Null)
                                {
                                    Uri serialConsoleLogBlobUriInstance = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue));
                                    bootDiagnosticsInstance.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance;
                                }
                            }
                            
                            JToken statusesArray4 = responseDoc["statuses"];
                            if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                            {
                                foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                {
                                    InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                    virtualMachineScaleSetVMInstanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                    
                                    JToken codeValue6 = statusesValue4["code"];
                                    if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                    {
                                        string codeInstance6 = ((string)codeValue6);
                                        instanceViewStatusInstance5.Code = codeInstance6;
                                    }
                                    
                                    JToken levelValue6 = statusesValue4["level"];
                                    if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                    {
                                        string levelInstance6 = ((string)levelValue6);
                                        instanceViewStatusInstance5.Level = levelInstance6;
                                    }
                                    
                                    JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                    if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                    {
                                        string displayStatusInstance6 = ((string)displayStatusValue6);
                                        instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                    }
                                    
                                    JToken messageValue6 = statusesValue4["message"];
                                    if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                    {
                                        string messageInstance6 = ((string)messageValue6);
                                        instanceViewStatusInstance5.Message = messageInstance6;
                                    }
                                    
                                    JToken timeValue6 = statusesValue4["time"];
                                    if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                        instanceViewStatusInstance5.Time = timeInstance6;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to list virtual machine scale sets VMs.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine Scale Set VMs operation response.
        /// </returns>
        public async Task<VirtualMachineScaleSetVMListResponse> ListAsync(VirtualMachineScaleSetVMListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters != null)
            {
                if (parameters.ResourceGroupName == null)
                {
                    throw new ArgumentNullException("parameters.ResourceGroupName");
                }
                if (parameters.VirtualMachineScaleSetName == null)
                {
                    throw new ArgumentNullException("parameters.VirtualMachineScaleSetName");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.ResourceGroupName);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/virtualMachineScaleSets/";
            if (parameters != null)
            {
                url = url + Uri.EscapeDataString(parameters.VirtualMachineScaleSetName);
            }
            url = url + "/virtualMachines";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (parameters != null && parameters.FilterExpression != null)
            {
                queryParameters.Add(parameters.FilterExpression);
            }
            if (parameters != null && parameters.SelectExpression != null)
            {
                queryParameters.Add(parameters.SelectExpression);
            }
            if (parameters != null && parameters.ExpandExpression != null)
            {
                queryParameters.Add(parameters.ExpandExpression);
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineScaleSetVMListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineScaleSetVMListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineScaleSetVM virtualMachineScaleSetVMInstance = new VirtualMachineScaleSetVM();
                                    result.VirtualMachineScaleSetVMs.Add(virtualMachineScaleSetVMInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        virtualMachineScaleSetVMInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineScaleSetVMInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        virtualMachineScaleSetVMInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineScaleSetVMInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            virtualMachineScaleSetVMInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> PowerOffAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "PowerOffAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSetVMs.BeginPoweringOffAsync(resourceGroupName, vmScaleSetName, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to restart a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> RestartAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSetVMs.BeginRestartingAsync(resourceGroupName, vmScaleSetName, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to start a virtual machine scale set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmScaleSetName'>
        /// Required. The name of the virtual machine scale set.
        /// </param>
        /// <param name='instanceId'>
        /// Required. The instance id of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> StartAsync(string resourceGroupName, string vmScaleSetName, string instanceId, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmScaleSetName", vmScaleSetName);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "StartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachineScaleSetVMs.BeginStartingAsync(resourceGroupName, vmScaleSetName, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Compute.Models.ComputeOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
